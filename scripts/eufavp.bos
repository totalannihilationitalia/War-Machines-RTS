#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, door1, door2, nanodoor1, nanodoor2, holder, nanos,
       beam1, beam2, flashers, pad;

static-var  Static_Var_1, spray, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


Build()
{
	while( Static_Var_1 )
	{
		emit-sfx 2048 from beam1;
		emit-sfx 2048 from beam2;
		sleep 60;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

activateScr()
{
	if( TRUE )
	{
		move door1 to x-axis [0.000000] now;
		move door2 to x-axis [0.000000] now;
		move door1 to x-axis [13.439972] speed [20.000000];
		move door2 to x-axis [-13.439972] speed [20.000000];
		wait-for-move door1 along x-axis;
	}
	if( TRUE )
	{
		turn nanodoor1 to z-axis <-180.000000> speed <250.000000>;
		turn nanodoor2 to z-axis <180.000000> speed <250.000000>;
		wait-for-turn nanodoor1 around z-axis;
	}
	if( TRUE )
	{
		move holder to y-axis [7.679999] speed [22.000000];
		wait-for-move holder along y-axis;
		turn nanos to x-axis <40.000000> speed <300.000000>;
		move nanos to z-axis [6] speed [20.000000];
		wait-for-turn nanos around x-axis;
	}
}

deactivateScr()
{
	if( TRUE )
	{
		turn nanos to x-axis <110.000000> now;
		turn nanos to x-axis <0.000000> speed <320.000000>;
		move nanos to z-axis [0.000000] speed [20.000000];
		wait-for-turn nanos around x-axis;
		move holder to y-axis [0.000000] speed [22.000000];
		wait-for-move holder along y-axis;
	}
	if( TRUE )
	{
		turn nanodoor1 to z-axis <0.000000> speed <250.000000>;
		turn nanodoor2 to z-axis <0.000000> speed <250.000000>;
		wait-for-turn nanodoor1 around z-axis;
	}
	if( TRUE )
	{
		move door1 to x-axis [0.000000] speed [20.000000];
		move door2 to x-axis [0.000000] speed [20.000000];
		wait-for-move door1 along x-axis;
	}
	sleep 20;
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache door1;
	dont-cache door2;
	dont-cache nanodoor1;
	dont-cache nanodoor2;
	dont-cache holder;
	dont-cache nanos;
	dont-cache pad;
	call-script activateScr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivateScr();
	cache door1;
	cache door2;
	cache nanodoor1;
	cache nanodoor2;
	cache holder;
	cache nanos;
	cache pad;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade body;
	dont-shade door1;
	dont-shade door2;
	dont-shade nanodoor1;
	dont-shade nanodoor2;
	dont-shade pad;
	dont-shade holder;
	dont-shade nanos;
	dont-cache pad;
	dont-cache flashers;
	unitviewer = FALSE;
	spray = body;
	turn nanos to x-axis <90.000000> speed <300.000000>;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray != 0 )
	{
		piecenum = beam2;
	}
	spray = !spray;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30.000000>;
	Static_Var_1 = 1;
	start-script Build();
}

StopBuilding()
{
	Static_Var_1 = 0;
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

AimFromPrimary(piecenum)
{
	piecenum = beam1;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP2;
		explode holder type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode door1 type SHATTER | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP2;
		explode holder type BITMAPONLY | BITMAP2;
		explode nanos type FALL | BITMAP3;
		explode flashers type FALL;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | BITMAP1;
		explode door1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode door2 type SHATTER | BITMAP2;
		explode holder type FALL | BITMAP2;
		explode nanos type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode flashers type FALL;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door1 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door2 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode holder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode nanos type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flashers type FALL;
}
