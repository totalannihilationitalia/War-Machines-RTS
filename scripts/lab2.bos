#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hip, body, lupleg, rupleg, lloleg, rloleg, lfoot,
       rfoot, firept1, firept2, flare1, flare2, lgun, rgun, barrel1,
       barrel2;

static-var  bMoving, Static_Var_2, Static_Var_3, gun_1, gun_2;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

walk()
{
	if( TRUE )
	{
		turn rupleg to x-axis <-36.005495> speed <180.000000>;
		turn lupleg to x-axis <54.010989> speed <180.000000>;
		sleep 150;
		turn rloleg to x-axis <45.010989> speed <200.000000>;
		turn lloleg to x-axis <-63.010989> speed <200.000000>;
		sleep 150;
		turn rfoot to x-axis <-18.000000> speed <180.000000>;
		turn lfoot to x-axis <27.005495> speed <180.000000>;
		sleep 350;
	}
	if( TRUE )
	{
		turn lupleg to x-axis <-36.005495> speed <180.000000>;
		turn rupleg to x-axis <54.010989> speed <180.000000>;
		sleep 150;
		turn lloleg to x-axis <45.010989> speed <200.000000>;
		turn rloleg to x-axis <-63.010989> speed <200.000000>;
		sleep 150;
		turn lfoot to x-axis <-18.000000> speed <180.000000>;
		turn rfoot to x-axis <27.005495> speed <180.000000>;
		sleep 350;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = Static_Var_2;
		if( moving )
		{
			if( aiming )
			{
				Static_Var_3 = 1;
				call-script walk();
			}
			if( !aiming )
			{
				Static_Var_3 = 0;
				call-script walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			Static_Var_3 = 1;
			if( justmoved )
			{
				turn rupleg to x-axis <0.000000> speed <100.000000>;
				turn lupleg to x-axis <0.000000> speed <100.000000>;
				turn lloleg to x-axis <0.000000> speed <100.000000>;
				turn rloleg to x-axis <0.000000> speed <100.000000>;
				turn rfoot to x-axis <0.000000> speed <100.000000>;
				turn lfoot to x-axis <0.000000> speed <100.000000>;
				justmoved = FALSE;
			}
			sleep 10;
		}
	}
}

Create()
{
	dont-cache firept1;
	dont-cache firept2;
	dont-cache flare1;
	dont-cache flare2;
	hide firept1;
	hide firept2;
	hide flare1;
	hide flare2;
	bMoving = FALSE;
	Static_Var_2 = 0;
	Static_Var_3 = 1;
	gun_1 = base;
	gun_2 = base;
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep 4500;
	turn body to y-axis <0.000000> speed <75.000000>;
	turn lgun to x-axis <0.000000> speed <35.000000>;
	turn rgun to x-axis <0.000000> speed <35.000000>;
	move barrel1 to z-axis [0.000000] now;
	move barrel2 to z-axis [0.000000] now;
	hide firept1;
	hide firept2;
	hide flare1;
	hide flare2;
	Static_Var_2 = 0;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn body to y-axis heading speed <150.000000>;
	turn lgun to x-axis <-0.082418> - pitch speed <75.000000>;
	turn rgun to x-axis <-0.082418> - pitch speed <75.000000>;
	wait-for-turn body around y-axis;
	wait-for-turn lgun around x-axis;
	wait-for-turn rgun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	wait-for-turn lgun around x-axis;
	wait-for-turn rgun around x-axis;
	wait-for-turn body around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show firept1;
		move barrel1 to z-axis [-2.000000] speed [50.000000];
		wait-for-move barrel1 along z-axis;
		hide firept1;
		move barrel1 to z-axis [0.000000] speed [5.000000];
	}
	if( gun_1 == 1 )
	{
		show firept2;
		move barrel2 to z-axis [-2.000000] speed [50.000000];
		wait-for-move barrel2 along z-axis;
		hide firept2;
		move barrel2 to z-axis [0.000000] speed [5.000000];
	}
	++gun_1;
	if( gun_1 == 2 )
	{
		gun_1 = base;
	}
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		show flare1;
		sleep 75;
		hide flare1;
	}
	if( gun_2 == 1 )
	{
		show flare2;
		sleep 75;
		hide flare2;
	}
	++gun_2;
	if( gun_2 == 2 )
	{
		gun_2 = base;
	}
}

AimFromPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = firept1;
	}
	if( gun_1 == 1 )
	{
		piecenum = firept2;
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = firept1;
	}
	if( gun_1 == 1 )
	{
		piecenum = firept2;
	}
}

AimFromSecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare2;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	hide firept1;
	hide firept2;
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode hip type BITMAPONLY | BITMAP2;
		explode body type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type FALL | BITMAP1;
		explode hip type FALL | BITMAP2;
		explode body type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode hip type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type SHATTER | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode hip type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode body type SHATTER | BITMAP5;
}
