#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, na1, na2, nng, ns, nj, sa1, sa2,
       sng, ss, ea1, ea2, eng, es, wa1, wa2,
       wng, ws, sj, ej, wj, np, shadow;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;


Close()
{
	signal 4;
	turn nng to x-axis <0.000000> speed <500.000000>;
	turn sng to x-axis <0.000000> speed <500.000000>;
	turn eng to z-axis <0.000000> speed <500.000000>;
	turn wng to z-axis <0.000000> speed <500.000000>;
	wait-for-turn nng around x-axis;
	turn na2 to x-axis <-5.000000> speed <25.000000>;
	turn sa2 to x-axis <5.000000> speed <25.000000>;
	turn ea2 to z-axis <5.000000> speed <25.000000>;
	turn wa2 to z-axis <-5.000000> speed <25.000000>;
	wait-for-turn na2 around x-axis;
	turn na2 to x-axis <0.000000> speed <5.000000>;
	turn sa2 to x-axis <0.000000> speed <5.000000>;
	turn ea2 to z-axis <0.000000> speed <5.000000>;
	turn wa2 to z-axis <0.000000> speed <5.000000>;
	wait-for-turn na2 around x-axis;
	turn na1 to x-axis <-5.000000> speed <25.000000>;
	turn sa1 to x-axis <5.000000> speed <25.000000>;
	turn ea1 to z-axis <5.000000> speed <25.000000>;
	turn wa1 to z-axis <-5.000000> speed <25.000000>;
	wait-for-turn na1 around x-axis;
	turn na1 to x-axis <0.000000> speed <5.000000>;
	turn sa1 to x-axis <0.000000> speed <5.000000>;
	turn ea1 to z-axis <0.000000> speed <5.000000>;
	turn wa1 to z-axis <0.000000> speed <5.000000>;
}

Open()
{
	turn na1 to x-axis <-87.000000> speed <25.000000>;
	turn sa1 to x-axis <87.000000> speed <25.000000>;
	turn ea1 to z-axis <87.000000> speed <25.000000>;
	turn wa1 to z-axis <-87.000000> speed <25.000000>;
	wait-for-turn na1 around x-axis;
	turn na1 to x-axis <-90.000000> speed <5.000000>;
	turn sa1 to x-axis <90.000000> speed <5.000000>;
	turn ea1 to z-axis <90.000000> speed <5.000000>;
	turn wa1 to z-axis <-90.000000> speed <5.000000>;
	wait-for-turn na1 around x-axis;
	turn na2 to x-axis <-87.000000> speed <25.000000>;
	turn sa2 to x-axis <87.000000> speed <25.000000>;
	turn ea2 to z-axis <87.000000> speed <25.000000>;
	turn wa2 to z-axis <-87.000000> speed <25.000000>;
	wait-for-turn na2 around x-axis;
	turn na2 to x-axis <-90.000000> speed <5.000000>;
	turn sa2 to x-axis <90.000000> speed <5.000000>;
	turn ea2 to z-axis <90.000000> speed <5.000000>;
	turn wa2 to z-axis <-90.000000> speed <5.000000>;
	wait-for-turn na2 around x-axis;
	turn nng to x-axis <-130.000000> speed <500.000000>;
	turn sng to x-axis <130.000000> speed <500.000000>;
	turn eng to z-axis <130.000000> speed <500.000000>;
	turn wng to z-axis <-130.000000> speed <500.000000>;
	sleep 2500;
	signal 4;
	set-signal-mask 4;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from na1;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Bla()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

Blabla()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Activate()
{
	while( Static_Var_2 )
	{
		sleep 200;
	}
	signal 2;
	Static_Var_2 = 1;
	if( !Static_Var_3 )
	{
		call-script Open();
		Static_Var_3 = 1;
	}
	call-script Bla();
	set INBUILDSTANCE to 1;
	Static_Var_2 = 0;
}

Deactivate()
{
	while( Static_Var_2 )
	{
		sleep 200;
	}
	signal 2;
	set-signal-mask 2;
	set INBUILDSTANCE to 0;
	sleep 2500;
	Static_Var_2 = 1;
	call-script Blabla();
	if( Static_Var_3 )
	{
		call-script Close();
		Static_Var_3 = 0;
	}
	Static_Var_2 = 0;
}

Create()
{
	dont-shade base;
	dont-shade na1;
	dont-shade na2;
	dont-shade nng;
	dont-shade ns;
	dont-shade nj;
	dont-shade sa1;
	dont-shade sa2;
	dont-shade sng;
	dont-shade ss;
	dont-shade ea1;
	dont-shade ea2;
	dont-shade eng;
	dont-shade es;
	dont-shade wa1;
	dont-shade wa2;
	dont-shade wng;
	dont-shade ws;
	dont-shade sj;
	dont-shade ej;
	dont-shade wj;
	dont-shade np;
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	Static_Var_1 = 1;
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = ns;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = ss;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = es;
	}
	if( Static_Var_1 == 4 )
	{
		piecenum = ws;
	}
	++Static_Var_1;
	if( Static_Var_1 > 4 )
	{
		Static_Var_1 = 1;
	}
}

StartBuilding()
{
	dont-shade base;
	dont-shade na1;
	dont-shade na2;
	dont-shade nng;
	dont-shade ns;
	dont-shade nj;
	dont-shade sa1;
	dont-shade sa2;
	dont-shade sng;
	dont-shade ss;
	dont-shade ea1;
	dont-shade ea2;
	dont-shade eng;
	dont-shade es;
	dont-shade wa1;
	dont-shade wa2;
	dont-shade wng;
	dont-shade ws;
	dont-shade sj;
	dont-shade ej;
	dont-shade wj;
	dont-shade np;
	dont-cache base;
}

StopBuilding()
{
	dont-shade base;
	dont-shade na1;
	dont-shade na2;
	dont-shade nng;
	dont-shade ns;
	dont-shade nj;
	dont-shade sa1;
	dont-shade sa2;
	dont-shade sng;
	dont-shade ss;
	dont-shade ea1;
	dont-shade ea2;
	dont-shade eng;
	dont-shade es;
	dont-shade wa1;
	dont-shade wa2;
	dont-shade wng;
	dont-shade ws;
	dont-shade sj;
	dont-shade ej;
	dont-shade wj;
	dont-shade np;
	cache base;
}

QueryBuildInfo(piecenum)
{
	piecenum = np;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode na1 type BITMAPONLY | BITMAP2;
		explode sa1 type SHATTER | BITMAP4;
		explode ea1 type BITMAPONLY | BITMAP1;
		explode wa1 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP1;
		explode na1 type BITMAPONLY | BITMAP2;
		explode sa1 type SHATTER | BITMAP4;
		explode ea1 type BITMAPONLY | BITMAP1;
		explode wa1 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP1;
		explode na1 type BITMAPONLY | BITMAP2;
		explode sa1 type SHATTER | BITMAP4;
		explode ea1 type BITMAPONLY | BITMAP1;
		explode wa1 type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | BITMAP1;
	explode na1 type BITMAPONLY | BITMAP2;
	explode sa1 type SHATTER | BITMAP4;
	explode ea1 type BITMAPONLY | BITMAP1;
	explode wa1 type BITMAPONLY | BITMAP2;
}
