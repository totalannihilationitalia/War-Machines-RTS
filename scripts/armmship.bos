#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, launcher2, door1, door2, plate, wake1,
       wake2, turret2, fp11, fp12, fp13;

static-var  Static_Var_1, gun_1, gun_3, restore_delay, Static_Var_5,
            statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_3			4
#define SIG_MOVE			8


activatescr()
{
	if( TRUE )
	{
		move door1 to x-axis [0.000000] now;
		move door1 to x-axis [4.000000] speed [6.000000];
		move door2 to x-axis [0.000000] now;
		move door2 to x-axis [-4.000000] speed [7.000000];
		sleep 600;
	}
}

deactivatescr()
{
	if( TRUE )
	{
		move plate to y-axis [4.000000] now;
		move door1 to x-axis [4.000000] now;
		move door2 to x-axis [-4.000000] now;
		sleep 750;
	}
	if( TRUE )
	{
		move door1 to x-axis [0.000000] speed [6.000000];
		move door2 to x-axis [0.000000] speed [7.000000];
		sleep 600;
	}
	sleep 10;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

go()
{
	call-script activatescr();
	Static_Var_1 = 1;
}

stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
	if( Static_Var_5 )
	{
	}
	Static_Var_5 = 0;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
    hide flare1;
    hide flare2;
	Static_Var_5 = 0;
	gun_1 = flare2;
	gun_3 = flare2;
	Static_Var_1 = 0;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
}

abaim()
{
	sleep 4000;
	signal SIG_AIM_3;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 8;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	Static_Var_5 = 0;
	start-script RequestState(1);
	turn launcher2 to y-axis <0.000000> speed <70.016484>;
	turn launcher2 to x-axis <0.000000> speed <30.005495>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn launcher2 to y-axis heading speed <170.038462>;
	turn launcher2 to x-axis <0.000000> - pitch speed <130.027473>;
	wait-for-turn launcher2 around y-axis;
	wait-for-turn launcher2 around x-axis;
	start-script abaim();
	return (1);
}

TargetCleared(Func_Var_1)
{
	signal SIG_AIM_3;
}

FirePrimary()
{
	++gun_1;
	if( gun_1 == 4 )
	{
		gun_1 = flare2;
	}
}

FireTertiary()
{
	if( gun_3 == 1 )
	{
	emit-sfx 1024 + 0 from flare1;
		gun_3 = base;
	}
	if( gun_3 == 2 )
	{
			emit-sfx 1024 + 0 from flare2;
		gun_3 = flare2;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = plate;
}

AimFromTertiary(piecenum)
{
	piecenum = launcher2;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = fp11;
	}
	if( gun_1 == 2 )
	{
		piecenum = fp12;
	}
	if( gun_1 == 3 )
	{
		piecenum = fp13;
	}
}

QueryTertiary(piecenum)
{
	if( gun_3 == 1 )
	{
		piecenum = flare1;
	}
	if( gun_3 == 2 )
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP4;
		explode flare2 type BITMAPONLY | BITMAP5;
		explode launcher2 type BITMAPONLY | BITMAP2;
		explode plate type BITMAPONLY | BITMAP3;
		explode turret2 type BITMAPONLY | BITMAP2;
		explode wake1 type BITMAPONLY | BITMAP3;
		explode wake2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode launcher2 type SHATTER | BITMAP2;
		explode plate type BITMAPONLY | BITMAP3;
		explode turret2 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode launcher2 type SHATTER | BITMAP2;
		explode plate type BITMAPONLY | BITMAP3;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode door1 type BITMAPONLY | BITMAP2;
	explode door2 type BITMAPONLY | BITMAP3;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode launcher2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode plate type BITMAPONLY | BITMAP3;
	explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
