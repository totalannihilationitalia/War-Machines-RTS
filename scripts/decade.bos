#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret1, turret2, abarrela, abarrelb, bbarrela, bbarrelb, flare11,
       flare12, flare21, flare22, wake1, wake2, ground;

static-var  gun_1, gun_2, restore_delay, Static_Var_4;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8


SetDirection(Func_Var_1, Func_Var_2)
{
	Func_Var_2 = ( get UNKNOWN_UNIT_VALUE(133)(Static_Var_4) - get UNKNOWN_UNIT_VALUE(133)(Func_Var_1) ) / 2;
	turn ground to y-axis Func_Var_1 speed Func_Var_2;
	turn base to y-axis <0.000000> - Func_Var_1 speed Func_Var_2;
	Static_Var_4 = Func_Var_1;
}

RockOnWaves(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_1 = -18;
	Func_Var_2 = -18;
	while( TRUE )
	{
		while( get UNKNOWN_UNIT_VALUE(133)(Func_Var_2) < 238 )
		{
			Func_Var_3 = 263 - get UNKNOWN_UNIT_VALUE(133)(Func_Var_2);
			turn ground to x-axis Func_Var_2 speed Func_Var_3 * <0.027473>;
			wait-for-turn ground around x-axis;
			Func_Var_2 = Func_Var_2 + Func_Var_1;
		}
		Func_Var_1 = 0 - Func_Var_1;
		Func_Var_2 = Func_Var_2 + Func_Var_1 + Func_Var_1;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare11;
	hide flare12;
	hide flare21;
	hide flare22;
	gun_1 = base;
	gun_2 = base;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.000000> speed <90.000000>;
	turn turret2 to y-axis <0.000000> speed <90.000000>;
	turn abarrela to x-axis <0.000000> speed <50.000000>;
	turn abarrelb to x-axis <0.000000> speed <50.000000>;
	turn bbarrela to x-axis <0.000000> speed <50.000000>;
	turn bbarrelb to x-axis <0.000000> speed <50.000000>;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.000000> speed <3.000000>;
		move base to y-axis [0.229999] speed [0.229999];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.000000> speed <3.000000>;
		move base to y-axis [0.000000] speed [0.229999];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var Func_Var_1;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		Func_Var_1 = get CURRENT_SPEED * 100 / get UNKNOWN_UNIT_VALUE(75);
		if( Func_Var_1 < 50 )
		{
			Func_Var_1 = 50;
		}
		sleep 9000 / Func_Var_1;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.000000> speed <3.000000>;
	move base to y-axis [0.000000] speed [0.229999];
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <270.000000>;
	turn abarrela to x-axis <0.000000> - pitch speed <150.000000>;
	turn abarrelb to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn abarrela around x-axis;
	wait-for-turn abarrelb around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 )
	{
		move abarrelb to z-axis [-1.000000] speed [500.000000];
		wait-for-move abarrelb along z-axis;
		move abarrelb to z-axis [0.000000] speed [5.000000];
		emit-sfx 1024 + 0 from flare12;
	//	show flare12;
		sleep 150;
	//	hide flare12;
	}
	else
	{
		move abarrela to z-axis [-1.000000] speed [500.000000];
		wait-for-move abarrela along z-axis;
		move abarrela to z-axis [0.000000] speed [5.000000];
		emit-sfx 1024 + 0 from flare11;
	//	show flare11;
		sleep 150;
	//	hide flare11;
	}
	gun_1 = !gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <270.000000>;
	turn bbarrela to x-axis <0.000000> - pitch speed <150.000000>;
	turn bbarrelb to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn bbarrela around x-axis;
	wait-for-turn bbarrelb around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if( gun_2 )
	{
		move bbarrelb to z-axis [-1.000000] speed [500.000000];
		wait-for-move bbarrelb along z-axis;
		move bbarrelb to z-axis [0.000000] speed [5.000000];
//		show flare22;
		emit-sfx 1024 + 0 from flare22;
		sleep 150;
//		hide flare22;
	}
	else
	{
		move bbarrela to z-axis [-1.000000] speed [500.000000];
		wait-for-move bbarrela along z-axis;
		move bbarrela to z-axis [0.000000] speed [5.000000];
				emit-sfx 1024 + 0 from flare21;
//		show flare21;
		sleep 150;
//		hide flare21;
	}
	gun_2 = !gun_2;
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QueryPrimary(piecenum)
{
	piecenum = 7 + gun_1;
}

QuerySecondary(piecenum)
{
	piecenum = 9 + gun_2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare11;
	hide flare12;
	hide flare21;
	hide flare22;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode abarrela type BITMAPONLY | BITMAP1;
		explode bbarrelb type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare22 type BITMAPONLY | BITMAP4;
		explode flare12 type BITMAPONLY | BITMAP5;
		explode flare21 type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP2;
		explode wake1 type BITMAPONLY | BITMAP3;
		explode wake2 type BITMAPONLY | BITMAP4;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode abarrelb type FALL | BITMAP1;
		explode abarrelb type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare11 type FALL | BITMAP4;
		explode flare22 type FALL | BITMAP5;
		explode flare21 type FALL | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		explode wake1 type FALL | BITMAP3;
		explode wake2 type FALL | BITMAP4;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode abarrela type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode abarrelb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare22 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode flare12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret1 type SHATTER | BITMAP2;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (corpsetype);
	}
	corpsetype = 3;
	explode abarrelb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode bbarrela type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode flare12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare21 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode flare22 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	return (corpsetype);
}
