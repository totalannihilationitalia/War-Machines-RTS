#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hips, body, larm, barrel1, rarm, barrel2, barrel3,
       barrel4, lupperleg, llowerleg, lfoot, ltoea, ltoeb, lthumb, rupperleg,
       rlowerleg, rfoot, rtoea, rtoeb, rthumb, flare1, flare2, flare3,
       flare4;

static-var  Static_Var_1, gun_2, bMoving, unitviewer;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_2			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from lupperleg;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

walk()
{
	if( TRUE )
	{
		turn lupperleg to x-axis <40.005495> speed <50.000000>;
		turn rupperleg to x-axis <-40.005495> speed <50.000000>;
		turn lfoot to x-axis <-15.000000> speed <70.000000>;
		turn rfoot to x-axis <10.000000> speed <50.000000>;
		turn rlowerleg to x-axis <-20.000000> speed <70.000000>;
		turn body to x-axis <6.000000> speed <5.000000>;
		sleep 505;
		turn lfoot to x-axis <20.000000> speed <100.000000>;
		turn rfoot to x-axis <10.000000> speed <50.000000>;
		turn rlowerleg to x-axis <40.005495> speed <100.000000>;
		turn ltoea to x-axis <45.010989> speed <100.000000>;
		turn ltoeb to x-axis <45.010989> speed <100.000000>;
		turn lthumb to x-axis <-45.010989> speed <100.000000>;
		turn rtoea to x-axis <0.000000> speed <100.000000>;
		turn rtoeb to x-axis <0.000000> speed <100.000000>;
		sleep 600;
		turn rthumb to x-axis <0.000000> speed <100.000000>;
		move hips to y-axis [2.000000] speed [2.000000];
		turn hips to z-axis <7.000000> speed <3.000000>;
	}
	if( TRUE )
	{
		turn lupperleg to x-axis <-40.005495> speed <50.000000>;
		turn rupperleg to x-axis <40.005495> speed <50.000000>;
		turn rfoot to x-axis <-20.000000> speed <130.000000>;
		turn llowerleg to x-axis <-40.005495> speed <100.000000>;
		sleep 1050;
		turn rfoot to x-axis <20.000000> speed <100.000000>;
		turn llowerleg to x-axis <40.005495> speed <100.000000>;
		move hips to y-axis [0.000000] speed [2.000000];
		turn ltoea to x-axis <0.000000> speed <100.000000>;
		turn ltoeb to x-axis <0.000000> speed <100.000000>;
		turn rtoea to x-axis <45.010989> speed <100.000000>;
		turn rtoeb to x-axis <45.010989> speed <100.000000>;
		turn rthumb to x-axis <-45.010989> speed <100.000000>;
		sleep 600;
		turn lthumb to x-axis <0.000000> speed <100.000000>;
		move hips to y-axis [2.000000] speed [2.000000];
		turn hips to z-axis <-7.000000> speed <8.000000>;
	}
	while( TRUE )
	{
		if( TRUE )
		{
			turn body to y-axis <-10.000000> speed <12.000000>;
			turn body to x-axis <-5.000000> speed <6.000000>;
			turn lupperleg to x-axis <40.005495> speed <50.000000>;
			turn rupperleg to x-axis <-40.005495> speed <50.000000>;
			turn lfoot to x-axis <-20.000000> speed <130.000000>;
			turn rlowerleg to x-axis <-40.005495> speed <100.000000>;
			sleep 1050;
			turn lfoot to x-axis <20.000000> speed <100.000000>;
			turn rfoot to x-axis <20.000000> speed <70.000000>;
			turn rlowerleg to x-axis <40.005495> speed <100.000000>;
			move hips to y-axis [0.000000] speed [2.000000];
			turn ltoea to x-axis <45.010989> speed <100.000000>;
			turn ltoeb to x-axis <45.010989> speed <100.000000>;
			turn lthumb to x-axis <-45.010989> speed <100.000000>;
			turn rtoea to x-axis <0.000000> speed <100.000000>;
			turn rtoeb to x-axis <0.000000> speed <100.000000>;
			sleep 600;
			turn rthumb to x-axis <0.000000> speed <100.000000>;
			move hips to y-axis [2.000000] speed [2.000000];
			turn hips to z-axis <7.000000> speed <8.000000>;
		}
		if( TRUE )
		{
			turn body to y-axis <10.000000> speed <12.000000>;
			turn body to x-axis <6.000000> speed <6.000000>;
			turn lupperleg to x-axis <-40.005495> speed <50.000000>;
			turn rupperleg to x-axis <40.005495> speed <50.000000>;
			turn rfoot to x-axis <-20.000000> speed <130.000000>;
			turn llowerleg to x-axis <-40.005495> speed <100.000000>;
			sleep 1050;
			turn rfoot to x-axis <20.000000> speed <100.000000>;
			turn llowerleg to x-axis <40.005495> speed <100.000000>;
			move hips to y-axis [0.000000] speed [2.000000];
			turn ltoea to x-axis <0.000000> speed <100.000000>;
			turn ltoeb to x-axis <0.000000> speed <100.000000>;
			turn rtoea to x-axis <45.010989> speed <100.000000>;
			turn rtoeb to x-axis <45.010989> speed <100.000000>;
			turn rthumb to x-axis <-45.010989> speed <100.000000>;
			sleep 600;
			turn lthumb to x-axis <0.000000> speed <100.000000>;
			move hips to y-axis [2.000000] speed [2.000000];
			turn hips to z-axis <-7.000000> speed <8.000000>;
		}
	}
}

stop()
{
	turn lupperleg to x-axis <0.000000> speed <50.000000>;
	turn rupperleg to x-axis <0.000000> speed <50.000000>;
	turn llowerleg to x-axis <0.000000> speed <100.000000>;
	turn rlowerleg to x-axis <0.000000> speed <100.000000>;
	turn body to y-axis <0.000000> speed <100.000000>;
	turn body to x-axis <0.000000> speed <20.000000>;
	move hips to y-axis [0.000000] speed [20.000000];
	turn hips to z-axis <0.000000> speed <20.000000>;
	turn rtoea to x-axis <0.000000> speed <100.000000>;
	turn rtoeb to x-axis <0.000000> speed <100.000000>;
	turn rthumb to x-axis <0.000000> speed <100.000000>;
	turn ltoea to x-axis <0.000000> speed <100.000000>;
	turn ltoeb to x-axis <0.000000> speed <100.000000>;
	turn lthumb to x-axis <0.000000> speed <100.000000>;
	turn rfoot to x-axis <0.000000> speed <100.000000>;
	turn lfoot to x-axis <0.000000> speed <100.000000>;
	wait-for-turn body around x-axis;
	turn body to x-axis <3.000000> speed <8.000000>;
	wait-for-turn body around x-axis;
	turn body to x-axis <-3.000000> speed <20.000000>;
	wait-for-turn body around x-axis;
	turn body to x-axis <0.000000> speed <20.000000>;
	wait-for-turn body around x-axis;
	bMoving = TRUE;
	sleep 20;
}

Create()
{
	unitviewer = FALSE;
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	dont-cache body;
	cache llowerleg;
	cache lfoot;
	cache ltoea;
	cache ltoeb;
	cache lthumb;
	cache rlowerleg;
	cache rfoot;
	cache rtoea;
	cache rtoeb;
	cache rthumb;
	dont-shade body;
	dont-shade flare1;
	dont-shade flare2;
	dont-shade flare3;
	dont-shade flare4;
	gun_2 = base;
	bMoving = TRUE;
	Static_Var_1 = 4000;
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script walk();
}

StopMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	start-script stop();
}

SweetSpot(piecenum)
{
	piecenum = body;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn body to y-axis <0.000000> speed <100.000000>;
	turn larm to x-axis <0.000000> speed <50.000000>;
	turn rarm to x-axis <0.000000> speed <50.000000>;
	bMoving = TRUE;
}

Demo()
{
	unitviewer = TRUE;
}

QueryPrimary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare3;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare4;
	}
}

AimFromPrimary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare3;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare4;
	}
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bMoving = FALSE;
	turn body to y-axis heading speed <150.000000>;
	wait-for-turn body around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_2 == 0 )
	{
		show flare3;
		move barrel3 to z-axis [-1.000000] now;
		sleep 350;
		hide flare3;
		move barrel3 to z-axis [0.000000] speed [4.000000];
	}
	if( gun_2 == 1 )
	{
		show flare4;
		move barrel4 to z-axis [-1.000000] now;
		sleep 350;
		hide flare4;
		move barrel4 to z-axis [0.000000] speed [4.000000];
	}
	gun_2 = !gun_2;
	bMoving = TRUE;
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare2;
	}
}

AimFromSecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare2;
	}
}

AimSecondary(heading, pitch)
{
	bMoving = FALSE;
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn body to y-axis heading speed <150.000000>;
	turn larm to x-axis <0.000000> - pitch speed <50.000000>;
	turn rarm to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn body around y-axis;
	wait-for-turn larm around x-axis;
	wait-for-turn rarm around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		move barrel1 to z-axis [-1.000000] now;
		show flare1;
		sleep 150;
		hide flare1;
		move barrel1 to z-axis [0.000000] speed [4.000000];
	}
	if( gun_2 == 1 )
	{
		move barrel2 to z-axis [-1.000000] now;
		show flare2;
		sleep 150;
		hide flare2;
		move barrel2 to z-axis [0.000000] speed [4.000000];
	}
	gun_2 = !gun_2;
	bMoving = TRUE;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode hips type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP1;
		explode lupperleg type BITMAPONLY | BITMAP1;
		explode llowerleg type BITMAPONLY | BITMAP1;
		explode rupperleg type BITMAPONLY | BITMAP1;
		explode rlowerleg type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode hips type SHATTER | BITMAP4;
		explode body type SHATTER | BITMAP4;
		explode lupperleg type SHATTER | BITMAP4;
		explode llowerleg type SHATTER | BITMAP4;
		explode rupperleg type SHATTER | BITMAP4;
		explode rlowerleg type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode hips type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lupperleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode llowerleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rupperleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rlowerleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode hips type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lupperleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode llowerleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rupperleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rlowerleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
