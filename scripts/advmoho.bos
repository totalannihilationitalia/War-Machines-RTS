#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, blade, bottom;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, statechg_DesiredState, statechg_StateChanging;


InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

activatescr()
{
	if( TRUE )
	{
		move blade to y-axis [0.000000] now;
		sleep 772;
	}
	if( TRUE )
	{
		sleep 198;
	}
	if( TRUE )
	{
		sleep 688;
	}
	if( TRUE )
	{
		sleep 201;
	}
	if( TRUE )
	{
		move blade to y-axis [0.000000] speed [11.000000];
		sleep 911;
	}
	sleep 34;
}

deactivatescr()
{
	if( TRUE )
	{
		move blade to y-axis [0.000000] now;
		sleep 768;
	}
	if( TRUE )
	{
		sleep 199;
	}
	if( TRUE )
	{
		sleep 689;
	}
	if( TRUE )
	{
		sleep 201;
	}
	if( TRUE )
	{
		move blade to y-axis [0.000000] speed [11.000000];
		sleep 911;
	}
	sleep 33;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	spin blade around y-axis speed Static_Var_1 accelerate Static_Var_2;
}

Stop()
{
	stop-spin blade around y-axis decelerate Static_Var_3;
	wait-for-turn blade around y-axis;
	call-script deactivatescr();
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 140;
	Static_Var_3 = 246;
	dont-cache blade;
	dont-cache bottom;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetSpeed(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode bottom type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode blade type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode bottom type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode blade type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode bottom type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode blade type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode bottom type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode blade type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
