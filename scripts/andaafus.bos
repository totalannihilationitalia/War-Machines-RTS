#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, rotore, energy;

static-var  statechg_DesiredState, statechg_StateChanging;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
//	call-script InitState();
	start-script SmokeUnit();
	dont-shade energy;

	dont-cache energy;



	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	spin energy around y-axis speed <-30.005495>;
	spin rotore around y-axis speed <60.010989>;
	}

Go()
{
	set ARMORED to 1;

}

Stop()
{
	set ARMORED to 0;

}

//InitState()
//{
	//statechg_DesiredState = TRUE;
//	statechg_StateChanging = FALSE;
//}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode rotore type BITMAPONLY | BITMAP2;
		explode energy type SHATTER | BITMAP3;

		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode rotore type BITMAPONLY | BITMAP2;
		explode energy type SHATTER | BITMAP3;

		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode rotore type BITMAPONLY | BITMAP2;
		explode energy type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;

		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode rotore type BITMAPONLY | BITMAP2;
	explode energy type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;

}
