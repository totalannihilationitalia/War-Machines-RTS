#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, platform, door1, door2, post1,
       post2, nano2, nano1, creator;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	if( TRUE )
	{
		move platform to y-axis [0.000000] now;
		move platform to y-axis [7.650000] speed [10.000000];
		sleep 735;
	}
	if( TRUE )
	{
		move platform to y-axis [7.600000] speed [0.000000];
		turn door1 to z-axis <-90.021978> speed <159.000000>;
		turn door2 to z-axis <90.021978> speed <159.000000>;
		sleep 565;
	}
	if( TRUE )
	{
		move platform to y-axis [7.600000] speed [0.000000];
		move door1 to y-axis [-4.500000] speed [7.000000];
		move door2 to y-axis [-4.450000] speed [7.000000];
		sleep 570;
	}
	if( TRUE )
	{
		move platform to y-axis [7.600000] speed [0.000000];
		move post1 to y-axis [12.400000] speed [21.000000];
		move post2 to y-axis [12.400000] speed [21.000000];
		sleep 571;
	}
	if( TRUE )
	{
		move platform to y-axis [7.600000] speed [0.000000];
		turn nano2 to z-axis <99.021978> speed <173.000000>;
		turn nano1 to z-axis <-99.021978> speed <174.000000>;
		sleep 571;
	}
	sleep 28;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		move platform to y-axis [7.600000] now;
		move platform to y-axis [7.600000] speed [0.000000];
		move post1 to y-axis [12.400000] now;
		move door1 to y-axis [-4.500000] now;
		move post2 to y-axis [12.400000] now;
		move door2 to y-axis [-4.450000] now;
		turn door1 to z-axis <-90.021978> now;
		turn door2 to z-axis <90.021978> now;
		turn nano2 to z-axis <99.340659> now;
		turn nano2 to z-axis <0.000000> speed <175.000000>;
		turn nano1 to z-axis <-99.890110> now;
		turn nano1 to z-axis <0.000000> speed <176.000000>;
		sleep 565;
	}
	if( TRUE )
	{
		move platform to y-axis [7.600000] speed [0.000000];
		move post1 to y-axis [0.000000] speed [21.000000];
		move post2 to y-axis [0.000000] speed [21.000000];
		sleep 570;
	}
	if( TRUE )
	{
		move platform to y-axis [7.600000] speed [0.000000];
		move door1 to y-axis [0.000000] speed [7.000000];
		move door2 to y-axis [0.000000] speed [7.000000];
		sleep 571;
	}
	if( TRUE )
	{
		move platform to y-axis [7.600000] speed [0.000000];
		turn door1 to z-axis <0.000000> speed <157.000000>;
		turn door2 to z-axis <0.000000> speed <157.000000>;
		sleep 571;
	}
	if( TRUE )
	{
		move platform to y-axis [0.000000] speed [10.000000];
		sleep 738;
	}
	sleep 28;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache door1;
	dont-cache door2;
	dont-cache nano1;
	dont-cache nano2;
	dont-cache pad;
	dont-cache platform;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache door1;
	cache door2;
	cache nano1;
	cache nano2;
	cache pad;
	cache platform;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade door1;
	dont-shade door2;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade pad;
	dont-shade platform;
	unitviewer = FALSE;
	spray = base;
	move base to y-axis [2.000000] now;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	move base to y-axis [0.000000] speed [4.000000];
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray != 0 )
	{
		piecenum = beam2;
	}
	spray = !spray;
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30.005495>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = creator;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano1 type BITMAPONLY | BITMAP1;
		explode nano2 type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode platform type BITMAPONLY | BITMAP4;
		explode post1 type BITMAPONLY | BITMAP5;
		explode post2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | BITMAP2;
		explode beam2 type FALL | BITMAP3;
		explode door1 type FALL | BITMAP4;
		explode door2 type FALL | BITMAP5;
		explode nano1 type FALL | BITMAP1;
		explode nano2 type FALL | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode platform type BITMAPONLY | BITMAP4;
		explode post1 type FALL | BITMAP5;
		explode post2 type FALL | BITMAP1;
		explode creator type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode beam2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode door2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode nano1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode nano2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode pad type SHATTER | BITMAP3;
		explode platform type BITMAPONLY | BITMAP4;
		explode post1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode post2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode creator type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode beam1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode beam2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode door1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode door2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode nano1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode nano2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode creator type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode pad type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode platform type BITMAPONLY | BITMAP4;
	explode post1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode post2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
}
