#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, door1, door2, door3, door4, door5,
       door6, sleeve, b1, barrel, flare, p1, p2, p3,
       p4;

static-var  Static_Var_1, restore_delay, bAiming, statechg_DesiredState, statechg_StateChanging,
            Static_Var_6, Static_Var_7, Static_Var_8;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> speed <110.000000>;
		turn door2 to z-axis <0.000000> speed <110.000000>;
		turn door3 to z-axis <0.000000> speed <110.000000>;
		turn door4 to z-axis <0.000000> speed <110.000000>;
		turn door5 to x-axis <0.000000> speed <110.000000>;
		turn door6 to x-axis <0.000000> speed <110.000000>;
		sleep 650;
		move turret to y-axis [0.000000] speed [15.000000];
		sleep 600;
		move b1 to z-axis [0.000000] speed [5.000000];
		move barrel to z-axis [0.000000] speed [5.000000];
	}
	sleep 10;
}

deactivatescr()
{
	if( TRUE )
	{
		move b1 to z-axis [-2.000000] speed [5.000000];
		move barrel to z-axis [-3.500000] speed [5.000000];
		sleep 500;
	}
	if( TRUE )
	{
		move turret to y-axis [-15.000000] speed [15.000000];
		sleep 700;
	}
	if( TRUE )
	{
		turn door1 to z-axis <120.000000> speed <110.000000>;
		turn door2 to z-axis <120.000000> speed <110.000000>;
		turn door3 to z-axis <-120.000000> speed <110.000000>;
		turn door4 to z-axis <-120.000000> speed <110.000000>;
		turn door5 to x-axis <120.000000> speed <110.000000>;
		turn door6 to x-axis <-120.000000> speed <110.000000>;
	}
	sleep 10;
}

HitByWeapon(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_3 = get HEALTH;
	if( Func_Var_3 <= 60 )
	{
		if( Static_Var_6 == 0 )
		{
			Static_Var_6 = 1;
			hide door1;
			explode door1 type FALL | SHATTER | SMOKE | BITMAP2;
		}
	}
	if( Func_Var_3 <= 50 )
	{
		if( Static_Var_7 == 0 )
		{
			Static_Var_7 = 1;
			hide door3;
			explode door3 type FALL | SHATTER | SMOKE | BITMAP2;
		}
	}
	if( Func_Var_3 <= 35 )
	{
		if( Static_Var_8 == 0 )
		{
			Static_Var_8 = 1;
			hide door4;
			explode door4 type FALL | SHATTER | SMOKE | BITMAP2;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	Static_Var_6 = 0;
	Static_Var_7 = 0;
	Static_Var_8 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent >= 40 )
		{
			if( Static_Var_8 == 1 )
			{
				Static_Var_8 = 0;
				show door4;
			}
		}
		if( healthpercent >= 60 )
		{
			if( Static_Var_7 == 1 )
			{
				Static_Var_7 = 0;
				show door3;
			}
		}
		if( healthpercent >= 75 )
		{
			if( Static_Var_6 == 1 )
			{
				Static_Var_6 = 0;
				show door1;
			}
		}
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	dont-cache door5;
	dont-cache door6;
	dont-cache sleeve;
	dont-cache b1;
	dont-cache barrel;
	dont-cache turret;
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 1;
	Static_Var_1 = 0;
	call-script deactivatescr();
	cache door1;
	cache door2;
	cache door3;
	cache door4;
	cache door5;
	cache door6;
	cache sleeve;
	cache barrel;
	cache b1;
	cache turret;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	if( bAiming == 0 )
	{
		turn turret to y-axis <0.000000> speed <200.000000>;
	}
	if( bAiming == 1 )
	{
		turn turret to y-axis <180.000000> speed <200.000000>;
	}
	turn sleeve to x-axis <0.000000> speed <100.000000>;
	wait-for-turn turret around y-axis;
	start-script RequestState(1);
}

Create()
{
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	dont-shade door5;
	dont-shade door6;
	dont-shade sleeve;
	dont-shade barrel;
	dont-shade b1;
	dont-shade turret;
	hide flare;
	Static_Var_1 = 1;
	bAiming = FALSE;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
	start-script RequestState(0);
	turn p1 to y-axis <-33.000000> now;
	turn p2 to y-axis <33.000000> now;
	turn p3 to y-axis <33.000000> now;
	turn p4 to y-axis <-33.000000> now;
	set-signal-mask SIG_AIM;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	if( heading < 49140 AND heading > 16380 )
	{
		bAiming = TRUE;
	}
	if( heading > 49140 OR heading < 16380 )
	{
		bAiming = FALSE;
	}
	turn turret to y-axis heading speed <200.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn sleeve around x-axis;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move barrel to z-axis [-1.500000] speed [200.000000];
	show flare;
	sleep 150;
	hide flare;
	move barrel to z-axis [0.000000] speed [10.000000];
}

AimFromPrimary(piecenum)
{
	piecenum = b1;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 1;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 2;
		}
		explode barrel type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode door3 type BITMAPONLY | BITMAP3;
		explode door4 type BITMAPONLY | BITMAP4;
		explode door5 type BITMAPONLY | BITMAP3;
		explode door6 type BITMAPONLY | BITMAP4;
		explode b1 type BITMAPONLY | BITMAP5;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP3;
	}
	if( severity <= 50 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 2;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 3;
		}
		explode body type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode door1 type FALL | BITMAP3;
		explode door2 type FALL | BITMAP4;
		explode barrel type FALL | BITMAP5;
		explode door4 type FALL | BITMAP3;
		explode door6 type FALL | BITMAP4;
		explode b1 type FALL | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 3;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 4;
		}
		explode body type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode b1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 4;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode turret type BITMAPONLY | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode b1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
