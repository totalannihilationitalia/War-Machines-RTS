#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, portanano, nano, nano1, nano2, nano3, nano4, pad,
       scudo1, scudo2, scudo3, scudo4;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, statechg_DesiredState, statechg_StateChanging, Static_Var_5;

// Signal definitions
#define SIG_ACTIVATE			2

Build()
{
	while( Static_Var_3 )
	{
		emit-sfx 2048 from nano1;
		emit-sfx 2048 from nano2;
		emit-sfx 2048 from nano3;
		emit-sfx 2048 from nano4;				
		sleep 60;
	}
}

OpenYard()
{
//	Static_Var_3 = 1;	
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
//emit-sfx 2048 from nano1;
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
//	Static_Var_3 = 0;	
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
//	Static_Var_3 = 1;	
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
//	Static_Var_3 = 0;	
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	cache pad;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
//			Static_Var_3 = 1;	
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
//	Static_Var_3 = 1;	
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
hide nano1;
hide nano2;
hide nano3;
hide nano4;

turn nano1 to y-axis <-45.000000> now;// speed <50.000000>;
turn nano2 to y-axis <45.000000> now;// speed <50.000000>;
turn nano3 to y-axis <135.000000> now;// speed <50.000000>;
turn nano4 to y-axis <-135.000000> now;// speed <50.000000>;

turn nano1 to z-axis <-25.000000> now;// speed <50.000000>;
turn nano2 to z-axis <-25.000000> now;// speed <50.000000>;
turn nano3 to z-axis <-25.000000> now;// speed <50.000000>;
turn nano4 to z-axis <-25.000000> now;// speed <50.000000>;
	dont-shade pad;
	Static_Var_1 = 0;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = nano1;
		Static_Var_1 = 1;
//		Static_Var_3 = 1;	
//		emit-sfx 2048 from nano1;
		return (0);
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = nano2;
//		emit-sfx 2048 from nano2;
		Static_Var_1 = 2;
//Static_Var_3 = 1;	
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = nano3;
//		emit-sfx 2048 from nano3;
		Static_Var_1 = 3;
//Static_Var_3 = 1;	
	}
	if( Static_Var_1 == 3 )
	{
//		emit-sfx 2048 from nano4;
		piecenum = nano4;
		Static_Var_1 = 0;
//Static_Var_3 = 1;	
	}
}

Activate()
{
	turn scudo1 to x-axis <-80.000000> speed <50.000000>;
	turn scudo2 to z-axis <-80.000000> speed <50.000000>;
	turn scudo3 to x-axis <80.000000> speed <50.000000>;
	turn scudo4 to z-axis <80.000000> speed <50.000000>;
	move nano to y-axis [8.000000] speed [12.000000];
	wait-for-move nano along y-axis;
	move pad to y-axis [3.000000] speed [12.000000];
	wait-for-move pad along y-axis;
	signal SIG_ACTIVATE;
	start-script Build();
	Static_Var_3 = 1;	
	start-script RequestState(0);
}

Deactivate()
{
//	Static_Var_3 = 0;	
	turn scudo1 to x-axis <0.000000> speed <50.000000>;
	turn scudo2 to z-axis <0.000000> speed <50.000000>;
	turn scudo3 to x-axis <0.000000> speed <50.000000>;
	turn scudo4 to z-axis <0.000000> speed <50.000000>;
	move pad to y-axis [0.000000] speed [12.000000];
	wait-for-move pad along y-axis;
	move nano to y-axis [0.000000] speed [12.000000];
	wait-for-move nano along y-axis;
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	sleep 5000;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	Static_Var_3 = 1;	
	sleep 5000;
	Static_Var_5 = 1;
}

StopBuilding()
{
	Static_Var_3 = 0;	
	Static_Var_5 = 0;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

AimFromPrimary(piecenum)
{
	piecenum = nano1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode nano1 type BITMAPONLY | BITMAP2;
		explode nano2 type BITMAPONLY | BITMAP3;
		explode pad type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode nano1 type SHATTER | BITMAP2;
		explode nano2 type BITMAPONLY | BITMAP3;
		explode pad type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode nano1 type SHATTER | BITMAP2;
		explode nano2 type BITMAPONLY | BITMAP3;
		explode pad type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode nano2 type BITMAPONLY | BITMAP3;
	explode pad type BITMAPONLY | BITMAP4;
}
