#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, cingoli;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging;


Build()
{
	while( Static_Var_2 )
	{

		sleep 100;
	}
}

activatescr()
{
	if( TRUE )
	{

		sleep 40;
	}
	if( TRUE )
	{

		sleep 40;
	}
	if( TRUE )
	{

		sleep 40;
	}
	if( TRUE )
	{

		sleep 40;
	}
	sleep 20;
}

deactivatescr()
{
	if( TRUE )
	{


		sleep 40;
	}
	if( TRUE )
	{

		sleep 40;
	}
	if( TRUE )
	{

		sleep 40;
	}
	if( TRUE )
	{

		sleep 40;
	}
	sleep 20;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	call-script activatescr();


	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;


	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

StartMoving()
{
}

StopMoving()
{
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);

	Static_Var_2 = 1;
	start-script Build();
}

StopBuilding()
{
	start-script RequestState(1);
	Static_Var_2 = 0;
}

QueryNanoPiece(piecenum)
{
	piecenum = base;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;

		explode base type BITMAPONLY | BITMAP2;



		explode cingoli type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;

		explode base type BITMAPONLY | BITMAP2;




		explode cingoli type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;

		explode base type BITMAPONLY | BITMAP2;


		explode cingoli type SHATTER | BITMAP1;


		return (0);
	}
	corpsetype = 3;

	explode base type BITMAPONLY | BITMAP2;

	explode cingoli type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
