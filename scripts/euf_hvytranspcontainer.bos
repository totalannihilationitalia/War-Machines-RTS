#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, Cube0, Cube1, Cube2, Cube3, Cube4, Cube5, Cube6,
       Cube7, Cube8;

static-var  restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				4
#define SIG_AIM_2			8
#define SIG_AIM_3			16


activatescr()
{

}

deactivatescr()
{

}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	start-script SmokeUnit();
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = base;
}

QuerySecondary(piecenum)
{
	piecenum = base;
}

QueryTertiary(piecenum)
{
	piecenum = base;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

FirePrimary()
{

	sleep 100;

}

FireSecondary()
{

	sleep 100;

}

FireTertiary()
{

	sleep 100;

}

Killed(severity, corpsetype)
{
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode Cube0 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode Cube1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode Cube2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode Cube3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode Cube4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode Cube5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode Cube6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode Cube7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		explode Cube8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode Cube0 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode Cube1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode Cube2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode Cube3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode Cube4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode Cube5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode Cube6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode Cube7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
	explode Cube8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAPNUKE;
}
