#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pivot, arms, arm1, arm2, arm3;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Activate()
{
	spin arms around y-axis speed Static_Var_1 accelerate Static_Var_2;
}

Deactivate()
{
	stop-spin arms around y-axis decelerate Static_Var_3;
	wait-for-turn arms around y-axis;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 150;
	Static_Var_3 = 120;
	dont-shade arms;
	dont-cache arms;
	dont-shade arm1;
	dont-cache arm1;
	dont-shade arm2;
	dont-cache arm2;
	dont-shade arm3;
	dont-cache arm3;
	start-script SmokeUnit();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetSpeed(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 20;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	return (1);
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		explode pivot type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode arms type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode arm1 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode arm2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode arm3 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP3;
		explode pivot type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode arms type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode arm1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode arm2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode arm3 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP2;

		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP3;
		explode pivot type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode arms type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode arm3 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;

		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP3;
	explode pivot type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode arms type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode arm3 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;

}
