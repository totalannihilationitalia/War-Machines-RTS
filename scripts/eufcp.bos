#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, doors1, doors2, hold1, hold2, box1, box2,
       box3, box4, nano1, nano2, nano3, nano4, beam1, beam2,
       beam3, beam4, pad;

static-var  Static_Var_1, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

activateScr()
{
	if( TRUE )
	{
		move doors1 to z-axis [0.000000] now;
		move doors2 to z-axis [0.000000] now;
		move doors1 to z-axis [-8.959998] speed [15.000000];
		move doors2 to z-axis [8.959998] speed [15.000000];
		wait-for-move doors1 along z-axis;
	}
	if( TRUE )
	{
		move hold1 to y-axis [4.479999] speed [10.000000];
		move hold2 to y-axis [4.479999] speed [10.000000];
		wait-for-move hold1 along y-axis;
	}
	if( TRUE )
	{
		move box1 to z-axis [-2.559998] speed [15.000000];
		move box2 to z-axis [2.559998] speed [15.000000];
		move box3 to z-axis [-2.559998] speed [15.000000];
		move box4 to z-axis [2.559998] speed [15.000000];
		wait-for-move box1 along z-axis;
		turn box1 to y-axis <90.000000> speed <200.000000>;
		turn box2 to y-axis <-90.000000> speed <200.000000>;
		turn box3 to y-axis <-90.000000> speed <200.000000>;
		turn box4 to y-axis <90.000000> speed <200.000000>;
		wait-for-turn box1 around y-axis;
	}
	if( TRUE )
	{
		turn nano1 to y-axis <70.000000> speed <100.000000>;
		turn nano2 to y-axis <-70.000000> speed <100.000000>;
		turn nano3 to y-axis <-70.000000> speed <100.000000>;
		turn nano4 to y-axis <70.000000> speed <100.000000>;
		wait-for-turn nano1 around y-axis;
	}
}

deactivateScr()
{
	if( TRUE )
	{
		turn nano1 to y-axis <70.000000> now;
		turn nano2 to y-axis <-70.000000> now;
		turn nano3 to y-axis <-70.000000> now;
		turn nano4 to y-axis <70.000000> now;
		turn nano1 to y-axis <0.000000> speed <100.000000>;
		turn nano2 to y-axis <0.000000> speed <100.000000>;
		turn nano3 to y-axis <0.000000> speed <100.000000>;
		turn nano4 to y-axis <0.000000> speed <100.000000>;
		wait-for-turn nano1 around y-axis;
	}
	if( TRUE )
	{
		turn box1 to y-axis <0.000000> speed <200.000000>;
		turn box2 to y-axis <0.000000> speed <200.000000>;
		turn box3 to y-axis <0.000000> speed <200.000000>;
		turn box4 to y-axis <0.000000> speed <200.000000>;
		wait-for-turn box1 around y-axis;
		move box1 to z-axis [0.000000] speed [15.000000];
		move box2 to z-axis [0.000000] speed [15.000000];
		move box3 to z-axis [0.000000] speed [15.000000];
		move box4 to z-axis [0.000000] speed [15.000000];
		wait-for-move box1 along z-axis;
	}
	if( TRUE )
	{
		move hold1 to y-axis [0.000000] speed [10.000000];
		move hold2 to y-axis [0.000000] speed [10.000000];
		wait-for-move hold1 along y-axis;
	}
	if( TRUE )
	{
		move doors1 to z-axis [0.000000] speed [15.000000];
		move doors2 to z-axis [0.000000] speed [15.000000];
		wait-for-move doors1 along z-axis;
	}
	sleep 21;
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache doors1;
	dont-cache doors2;
	dont-cache hold1;
	dont-cache hold2;
	dont-cache box1;
	dont-cache box2;
	dont-cache box3;
	dont-cache box4;
	dont-cache nano1;
	dont-cache nano2;
	dont-cache nano3;
	dont-cache nano4;
	call-script activateScr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivateScr();
	cache doors1;
	cache doors2;
	cache hold1;
	cache hold2;
	cache box1;
	cache box2;
	cache box3;
	cache box4;
	cache nano1;
	cache nano2;
	cache nano3;
	cache nano4;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade body;
	dont-shade doors1;
	dont-shade doors2;
	dont-shade hold1;
	dont-shade hold2;
	dont-shade box1;
	dont-shade box2;
	dont-shade box3;
	dont-shade box4;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade nano3;
	dont-shade nano4;
	dont-shade pad;
	dont-cache pad;
	unitviewer = FALSE;
	Static_Var_1 = 1;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = beam1;
		Static_Var_1 = 1;
		return (0);
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = beam2;
		Static_Var_1 = 2;
		return (0);
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = beam3;
		Static_Var_1 = 3;
		return (0);
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = beam4;
		Static_Var_1 = 0;
		return (0);
	}
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30.000000>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode doors1 type BITMAPONLY | BITMAP2;
		explode doors2 type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode doors1 type SHATTER | BITMAP2;
		explode doors2 type BITMAPONLY | BITMAP2;
		explode box2 type FALL;
		explode box3 type FALL;
		explode nano1 type FALL;
		explode nano4 type FALL;
		explode pad type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | BITMAP1;
		explode doors1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode doors2 type FALL | BITMAP2;
		explode box1 type FALL | BITMAP3;
		explode box2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode box3 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode box4 type FALL | BITMAP3;
		explode nano1 type FALL | EXPLODE_ON_HIT;
		explode nano2 type FALL;
		explode nano3 type FALL;
		explode nano4 type FALL | EXPLODE_ON_HIT;
		explode pad type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode doors1 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode doors2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode box1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode box2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode box3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode box4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode nano3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode nano4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode pad type BITMAPONLY | BITMAP2;
}
