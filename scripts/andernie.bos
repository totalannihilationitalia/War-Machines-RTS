#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare2, turret2, flare3, turret3, barrel2, barrel3, turrethold,
       AATURRET1, AATURRET2, AA1, AA2, AA3, AA4;

static-var  gun_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8, Static_Var_9, Static_Var_10,
            Static_Var_11;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	gun_1 = flare2;
	Static_Var_2 = 1;
	hide flare2;
	hide flare3;
	dont-cache flare2;
	dont-cache flare3;
	dont-cache barrel2;
	dont-cache barrel3;
	dont-cache turret2;
	dont-cache turret3;
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turrethold to y-axis heading speed <30.000000>;
	wait-for-turn turrethold around y-axis;
	return (1);
}

FirePrimary()
{
	if( gun_1 == 1 )
	{
		move barrel2 to z-axis [-5.000000] speed [500.000000];
		emit-sfx 1024 + 0 from flare2;
		//show flare2;
		sleep 250;
		//hide flare2;
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0.000000] speed [3.000000];
		gun_1 = turret2;
		return (0);
	}
	if( gun_1 == 2 )
	{
		move barrel3 to z-axis [-5.000000] speed [500.000000];
		emit-sfx 1024 + 0 from flare3;
		sleep 250;
//		hide flare3;
		wait-for-move barrel3 along z-axis;
		move barrel3 to z-axis [0.000000] speed [3.000000];
		gun_1 = flare2;
		return (0);
	}
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn AATURRET1 to y-axis heading speed <60.000000>;
	turn AATURRET2 to y-axis heading speed <60.000000>;
	turn AATURRET1 to x-axis <0.000000> - pitch speed <60.000000>;
	turn AATURRET2 to x-axis <0.000000> - pitch speed <60.000000>;
	wait-for-turn AATURRET1 around y-axis;
	wait-for-turn AATURRET2 around y-axis;
	wait-for-turn AATURRET1 around x-axis;
	wait-for-turn AATURRET2 around x-axis;
	return (1);
}

TargetCleared(Func_Var_1)
{
	stop-spin turrethold around y-axis;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare3;
	}
}

QuerySecondary(piecenum)
{
	if( Static_Var_2 == 1 )
	{
		piecenum = AA1;
		Static_Var_2 = 2;
		return (0);
	}
	if( Static_Var_2 == 2 )
	{
		piecenum = AA2;
		Static_Var_2 = 3;
		return (0);
	}
	if( Static_Var_2 == 3 )
	{
		piecenum = AA3;
		Static_Var_2 = 4;
		return (0);
	}
	if( Static_Var_2 == 4 )
	{
		piecenum = AA4;
		Static_Var_2 = 1;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turrethold;
}

AimFromSecondary(piecenum)
{
	piecenum = turrethold;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare2;
	hide flare3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turrethold type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP1;
		explode turret3 type BITMAPONLY | BITMAP1;
		explode barrel3 type BITMAPONLY | BITMAP1;
		explode flare3 type BITMAPONLY | BITMAP1;
		explode AATURRET1 type BITMAPONLY | BITMAP1;
		explode AA1 type BITMAPONLY | BITMAP1;
		explode AA2 type BITMAPONLY | BITMAP1;
		explode AATURRET2 type BITMAPONLY | BITMAP1;
		explode AA3 type BITMAPONLY | BITMAP1;
		explode AA4 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode turrethold type SHATTER | BITMAP4;
		explode turret2 type SHATTER | BITMAP4;
		explode barrel2 type SHATTER | BITMAP4;
		explode flare2 type SHATTER | BITMAP4;
		explode turret3 type SHATTER | BITMAP4;
		explode barrel3 type SHATTER | BITMAP4;
		explode flare3 type SHATTER | BITMAP4;
		explode AATURRET1 type SHATTER | BITMAP4;
		explode AA1 type SHATTER | BITMAP4;
		explode AA2 type SHATTER | BITMAP4;
		explode AATURRET2 type SHATTER | BITMAP4;
		explode AA3 type SHATTER | BITMAP4;
		explode AA4 type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turrethold type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode AATURRET1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode AA1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode AA2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode AATURRET2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode AA3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode AA4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turrethold type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode AATURRET1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode AA1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode AA2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode AATURRET2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode AA3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode AA4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
