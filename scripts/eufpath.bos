#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, guns, barrel1, barrel2, flare1, flare2;

static-var  gun_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	dont-shade turret;
	dont-shade guns;
	dont-shade barrel1;
	dont-shade barrel2;
	dont-cache flare1;
	dont-cache flare2;
	dont-cache turret;
	dont-cache guns;
	dont-cache barrel1;
	dont-cache barrel2;
	gun_1 = base;
	start-script SmokeUnit();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

RestoreAfterDelay()
{
	sleep 1000;
	stop-spin barrel1 around z-axis decelerate <5.000000>;
	stop-spin barrel2 around z-axis decelerate <5.000000>;
}

AimFromPrimary(piecenum)
{
	piecenum = guns;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <175.000000>;
	turn guns to x-axis <0.000000> - pitch speed <115.000000>;
	spin barrel1 around z-axis speed <600.000000>;
	spin barrel2 around z-axis speed <600.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn guns around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		gun_1 = body;
		emit-sfx 1024 from flare1;
		sleep 150;
		return (0);
	}
	if( gun_1 == 1 )
	{
		gun_1 = base;
		emit-sfx 1024 from flare2;
		sleep 150;
		return (0);
	}
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode guns type BITMAPONLY | BITMAP3;
		explode barrel1 type BITMAPONLY | BITMAP2;
		explode barrel2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		explode guns type BITMAPONLY | BITMAP3;
		explode barrel1 type FALL | BITMAP2;
		explode barrel2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | BITMAP1;
		explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode guns type FALL | BITMAP3;
		explode barrel1 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode barrel2 type FALL | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode guns type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
