#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, basement, gunturn, maingun, fusearms, laser, laserbeam, spark, aimpoint;

static-var  restore_delay;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	dont-cache base;
	dont-cache basement;
	dont-cache gunturn;
	dont-cache maingun;
	dont-cache fusearms;
	dont-cache laser;
	dont-cache laserbeam;
	dont-cache spark;
	hide laserbeam;
	move laser to z-axis  now;
	spin spark around x-axis speed <0.000000> accelerate <70.032967>;
	spin spark around y-axis speed <0.000000> accelerate <60.027473>;
	spin spark around z-axis speed <0.000000> accelerate <50.021978>;
	restore_delay = 2500;
	start-script SmokeUnit();
}

QueryPrimary(piecenum)
{
	piecenum = spark;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn maingun to x-axis <0.000000> speed <3.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn gunturn to y-axis heading speed <15.005495>;
	turn maingun to x-axis <0.000000> - pitch speed <7.000000>;
	wait-for-turn maingun around x-axis;
	wait-for-turn gunturn around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}
AimFromPrimary(piecenum)
{
	piecenum = aimpoint;
}

FirePrimary()
{
	emit-sfx 1024 from spark;
	move fusearms to z-axis [-4.000000] speed [80.000000];
	wait-for-move fusearms along z-axis;
	move fusearms to z-axis [0.000000] speed [4.000000];
}

Killed(severity, corpsetype)
{
	hide spark;
	if( severity <= 20 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode basement type BITMAPONLY | BITMAP2;
		explode gunturn type BITMAPONLY | BITMAP2;
		explode maingun type BITMAPONLY | BITMAP2;
		explode fusearms type BITMAPONLY | BITMAP2;
		explode laser type SHATTER | FIRE | BITMAP4;
		explode spark type BITMAPONLY | BITMAP4;
		explode laserbeam type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 40 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode basement type BITMAPONLY | BITMAP1;
		explode gunturn type BITMAPONLY | BITMAP3;
		explode maingun type BITMAPONLY | BITMAP3;
		explode fusearms type EXPLODE_ON_HIT | FIRE | BITMAPONLY | BITMAP3;
		explode laser type SHATTER | FIRE | BITMAP4 | SMOKE;
		explode laserbeam type BITMAPONLY | BITMAP1;
		explode spark type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 80 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP4;
		explode basement type BITMAPONLY | BITMAP4;
		explode gunturn type BITMAPONLY | BITMAP4;
		explode maingun type BITMAPONLY | BITMAP4;
		explode fusearms type BITMAPONLY | BITMAP4;
		explode laser type SHATTER | FALL | EXPLODE_ON_HIT | FIRE | SMOKE | BITMAP5;
		explode spark type BITMAPONLY | BITMAP5;
		explode laserbeam type BITMAPONLY | BITMAP4;
		return (0);
	}
}
