#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, centerbar1, centerbar2, quarter3, quarter4,
       quarter1, quarter2, nano2, nano1;

static-var  spray, unitviewer, statechg_DesiredState, Static_Var_4, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


Build()
{
	while( Static_Var_4 )
	{
		emit-sfx 1024 from beam1;
		emit-sfx 1024 from beam2;
		sleep 100;
	}
}

activatescr()
{
	if( TRUE )
	{
		move centerbar1 to x-axis [0.000000] now;
		move centerbar1 to x-axis [9.000000] speed [12.713025];
		move centerbar2 to x-axis [0.000000] now;
		move centerbar2 to x-axis [-9.000000] speed [12.639807];
		sleep 683;
	}
	if( TRUE )
	{
		move quarter3 to z-axis [6.400000] speed [9.288806];
		move quarter4 to z-axis [-5.950000] speed [8.635706];
		move quarter1 to z-axis [-5.850000] speed [8.490564];
		move quarter2 to z-axis [6.450000] speed [9.361377];
		sleep 689;
	}
	if( TRUE )
	{
		move nano2 to x-axis [4.050000] speed [5.861066];
		move nano1 to x-axis [-4.000000] speed [5.788690];
		sleep 691;
	}
	sleep 34;
}

deactivatescr()
{
	if( TRUE )
	{
		move centerbar1 to x-axis [9.000000] now;
		move centerbar2 to x-axis [-9.000000] now;
		move nano2 to x-axis [4.050000] now;
		move nano2 to x-axis [0.000000] speed [5.929712];
		move quarter3 to z-axis [6.400000] now;
		move quarter4 to z-axis [-5.950000] now;
		move nano1 to x-axis [-4.000000] now;
		move nano1 to x-axis [0.000000] speed [5.856494];
		move quarter1 to z-axis [-5.850000] now;
		move quarter2 to z-axis [6.450000] now;
		sleep 683;
	}
	if( TRUE )
	{
		move quarter3 to z-axis [0.000000] speed [9.288806];
		move quarter4 to z-axis [0.000000] speed [8.635706];
		move quarter1 to z-axis [0.000000] speed [8.490564];
		move quarter2 to z-axis [0.000000] speed [9.361377];
		sleep 689;
	}
	if( TRUE )
	{
		move centerbar1 to x-axis [0.000000] speed [12.577417];
		move centerbar2 to x-axis [0.000000] speed [12.505066];
		sleep 691;
	}
	sleep 34;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 4 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from quarter1;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from quarter2;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from quarter3;
			}
			if( Func_Var_4 == 4 )
			{
				emit-sfx smoketype from quarter4;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache beam1;
	dont-cache beam2;
	dont-cache centerbar1;
	dont-cache centerbar2;
	dont-cache nano1;
	dont-cache nano2;
	dont-cache pad;
	dont-cache quarter1;
	dont-cache quarter2;
	dont-cache quarter3;
	dont-cache quarter4;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beam1;
	cache beam2;
	cache centerbar1;
	cache centerbar2;
	cache nano1;
	cache nano2;
	cache pad;
	cache quarter1;
	cache quarter2;
	cache quarter3;
	cache quarter4;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade beam1;
	dont-shade beam2;
	dont-shade centerbar1;
	dont-shade centerbar2;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade pad;
	dont-shade quarter1;
	dont-shade quarter2;
	dont-shade quarter3;
	dont-shade quarter4;
	unitviewer = FALSE;
	spray = base;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray != 0 )
	{
		piecenum = beam2;
	}
	spray = !spray;
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <0.000000>;
	Static_Var_4 = 1;
	start-script Build();
}

StopBuilding()
{
	stop-spin pad around y-axis;
	Static_Var_4 = 0;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode centerbar1 type BITMAPONLY | BITMAP4;
		explode centerbar2 type BITMAPONLY | BITMAP5;
		explode nano1 type BITMAPONLY | BITMAP1;
		explode nano2 type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode quarter1 type BITMAPONLY | BITMAP4;
		explode quarter2 type BITMAPONLY | BITMAP5;
		explode quarter3 type BITMAPONLY | BITMAP1;
		explode quarter4 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | FIRE | BITMAP2;
		explode beam2 type FALL | SMOKE | BITMAP3;
		explode centerbar1 type BITMAPONLY | BITMAP4;
		explode centerbar2 type BITMAPONLY | BITMAP5;
		explode nano1 type SHATTER | BITMAP1;
		explode nano2 type SHATTER | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode quarter1 type BITMAPONLY | BITMAP4;
		explode quarter2 type BITMAPONLY | BITMAP5;
		explode quarter3 type BITMAPONLY | BITMAP1;
		explode quarter4 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode centerbar1 type BITMAPONLY | BITMAP4;
		explode centerbar2 type BITMAPONLY | BITMAP5;
		explode nano1 type SHATTER | BITMAP1;
		explode nano2 type SHATTER | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode quarter1 type BITMAPONLY | BITMAP4;
		explode quarter2 type BITMAPONLY | BITMAP5;
		explode quarter3 type BITMAPONLY | BITMAP1;
		explode quarter4 type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode centerbar1 type BITMAPONLY | BITMAP4;
	explode centerbar2 type BITMAPONLY | BITMAP5;
	explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode nano2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode pad type BITMAPONLY | BITMAP3;
	explode quarter1 type BITMAPONLY | BITMAP4;
	explode quarter2 type BITMAPONLY | BITMAP5;
	explode quarter3 type BITMAPONLY | BITMAP1;
	explode quarter4 type BITMAPONLY | BITMAP2;
}
