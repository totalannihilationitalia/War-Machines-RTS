#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base,bottom, turret, sleeves, barrel1, barrel2, barrel3, flare1,
       flare2, flare3;

static-var  gun_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	dont-cache turret;
	dont-cache bottom;
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache barrel3;
	dont-cache sleeves;
	dont-cache flare1;
	dont-cache flare2;
	dont-cache flare3;
	gun_1 = base;
	start-script SmokeUnit();
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare3;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <30.000000>;
	turn sleeves to x-axis <0.000000> - pitch speed <10.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move barrel1 to z-axis [-3.000000] speed [500.000000];
//		show flare1;
		emit-sfx 1024 + 0 from flare1;
		sleep 150;
//		hide flare1;
		move barrel1 to z-axis [0.000000] speed [1.000000];
	}
	if( gun_1 == 1 )
	{
		move barrel2 to z-axis [-3.000000] speed [500.000000];
//		show flare2;
		emit-sfx 1024 + 0 from flare2;
		sleep 150;
//		hide flare2;
		move barrel2 to z-axis [0.000000] speed [1.000000];
	}
	if( gun_1 == 2 )
	{
		move barrel3 to z-axis [-3.000000] speed [500.000000];
//		show flare3;
		emit-sfx 1024 + 0 from flare3;
		sleep 150;
//		hide flare3;
		move barrel3 to z-axis [0.000000] speed [1.000000];
	}
	++gun_1;
	if( gun_1 == 3 )
	{
		gun_1 = base;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP2;
		explode barrel3 type BITMAPONLY | BITMAP4;
		explode bottom type BITMAPONLY | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP4;
		explode flare2 type BITMAPONLY | BITMAP5;
		explode flare3 type BITMAPONLY | BITMAP1;
		explode sleeves type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode barrel1 type FALL | BITMAP1;
		explode barrel2 type FALL | BITMAP2;
		explode barrel3 type FALL | BITMAP3;
		explode bottom type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | BITMAP4;
		explode flare2 type FALL | BITMAP5;
		explode flare3 type FALL | BITMAP2;
		explode sleeves type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode bottom type BITMAPONLY | BITMAP3;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode sleeves type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode bottom type BITMAPONLY | BITMAP3;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleeves type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode turret type BITMAPONLY | BITMAP2;
}
