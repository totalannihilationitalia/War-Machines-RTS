#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, barrel1, flare1, barrel2, flare2, wake1, wake2,
       foreturret, foregun, foreflare, aftturret, aftgun, aftflare;

static-var  gun_1, restore_delay, gun_2, bMoving;

// Signal definitions
#define SIG_AIM_2			2
#define SIG_AIM				4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

EmitWakes()
{
	while( TRUE )
	{
		if( bMoving )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		sleep 300;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide foreflare;
	hide aftflare;
	gun_1 = base;
	gun_2 = base;
	bMoving = FALSE;
	restore_delay = 3000;
	start-script SmokeUnit();
	start-script EmitWakes();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <55.000000>;
	turn barrel1 to x-axis <0.000000> speed <15.000000>;
	turn barrel2 to x-axis <0.000000> speed <15.000000>;
}

RestoreDeckLaser()
{
	sleep 3000;
	set-signal-mask 0;
	turn foreturret to y-axis <0.000000> speed <150.000000>;
	turn foregun to x-axis <0.000000> speed <100.000000>;
	turn aftturret to y-axis <0.000000> speed <150.000000>;
	turn aftgun to x-axis <0.000000> speed <100.000000>;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	if( gun_2 == 0 )
	{
		turn foreturret to y-axis heading speed <300.000000>;
		turn foregun to x-axis <0.000000> - pitch speed <200.000000>;
		wait-for-turn foreturret around y-axis;
		wait-for-turn foregun around x-axis;
		start-script RestoreDeckLaser();
		return (1);
	}
	if( gun_2 == 1 )
	{
		turn aftturret to y-axis heading speed <300.000000>;
		turn aftgun to x-axis <0.000000> - pitch speed <200.000000>;
		wait-for-turn aftturret around y-axis;
		wait-for-turn aftgun around x-axis;
		start-script RestoreDeckLaser();
		return (1);
	}
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
//		show foreflare;
		emit-sfx 1024 from foreflare;
		sleep 150;
//		hide foreflare;
		gun_2 = turret;
		return (0);
	}
	if( gun_2 == 1 )
	{
		emit-sfx 1024 from aftflare;
//		show aftflare;
		sleep 150;
//		hide aftflare;
		gun_2 = base;
		return (0);
	}
}

AimFromSecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = foregun;
	}
	if( gun_2 == 1 )
	{
		piecenum = aftgun;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = foreflare;
	}
	if( gun_2 == 1 )
	{
		piecenum = aftflare;
	}
}

AimTertiary(heading, pitch)
{
	return (1);
}

FireTertiary()
{
	sleep 150;
}

AimFromTertiary(piecenum)
{
	piecenum = base;
}

QueryTertiary(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <110.000000>;
	turn barrel1 to x-axis <0.000000> - pitch speed <90.000000>;
	turn barrel2 to x-axis <0.000000> - pitch speed <90.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrel1 around x-axis;
	wait-for-turn barrel2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
			emit-sfx 1025 from flare1;
//		show flare1;
		sleep 150;
//		hide flare1;
		gun_1 = turret;
		return (0);
	}
	if( gun_1 == 1 )
	{
				emit-sfx 1025 from flare1;
//		show flare2;
		sleep 150;
//		hide flare2;
		gun_1 = base;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide foreflare;
	hide aftflare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP1;
		explode foreturret type BITMAPONLY | BITMAP2;
		explode aftturret type BITMAPONLY | BITMAP1;
		explode foregun type BITMAPONLY | BITMAP3;
		explode aftgun type BITMAPONLY | BITMAP1;
		explode wake1 type BITMAPONLY | BITMAP2;
		explode wake2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP3;
		explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode foreturret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode aftturret type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode foregun type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode aftgun type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP3;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode foreturret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode aftturret type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode foregun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode aftgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
