#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, leg1, leg3, leg4, leg6, box,
       flare1;

static-var  Static_Var_1, bMoving, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, statechg_DesiredState, statechg_StateChanging;


Build2()
{
	turn box to y-axis Static_Var_1 speed <300.000000>;
	wait-for-turn box around y-axis;
	Static_Var_6 = 1;
	while( Static_Var_6 == 1 )
	{
		emit-sfx 2048 from flare1;
		sleep 60;
	}
}

walk2()
{
	while( bMoving )
	{
		if( bMoving )
		{
			turn leg1 to y-axis <43.780220> now;
			turn leg1 to y-axis <0.000000> speed <218.000000>;
			turn leg1 to z-axis <0.593407> now;
			turn leg1 to z-axis <0.000000> speed <3.000000>;
			turn leg3 to y-axis <34.648352> now;
			turn leg3 to y-axis <34.005495> speed <3.000000>;
			turn leg3 to z-axis <31.615385> now;
			turn leg3 to z-axis <0.000000> speed <155.000000>;
			turn leg4 to y-axis <-40.137363> now;
			turn leg4 to y-axis <-40.005495> speed <0.000000>;
			turn leg4 to z-axis <-31.005495> now;
			turn leg4 to z-axis <0.000000> speed <152.000000>;
			turn leg6 to y-axis <0.000000> now;
			turn leg6 to y-axis <-30.005495> speed <152.000000>;
			turn leg6 to z-axis <-45.005495> now;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to z-axis <31.005495> speed <158.000000>;
			turn leg3 to y-axis <0.000000> speed <170.000000>;
			turn leg3 to z-axis <0.000000> speed <3.000000>;
			turn leg4 to y-axis <0.000000> speed <200.000000>;
			turn leg6 to z-axis <2.000000> speed <237.000000>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <55.005495> speed <279.000000>;
			turn leg1 to z-axis <31.005495> speed <3.000000>;
			turn leg3 to z-axis <31.005495> speed <158.000000>;
			turn leg4 to y-axis <0.000000> speed <3.000000>;
			turn leg4 to z-axis <-31.005495> speed <152.000000>;
			turn leg6 to y-axis <3.000000> speed <167.000000>;
			sleep 200;
		}
		turn leg1 to y-axis <43.005495> speed <60.000000>;
		turn leg1 to z-axis <0.000000> speed <152.000000>;
		turn leg3 to y-axis <34.005495> speed <173.000000>;
		turn leg3 to z-axis <31.005495> speed <0.000000>;
		turn leg4 to y-axis <-40.005495> speed <197.000000>;
		turn leg4 to z-axis <-31.005495> speed <0.000000>;
		turn leg6 to y-axis <0.000000> speed <15.000000>;
		turn leg6 to z-axis <-45.005495> speed <237.000000>;
		sleep 200;
	}
}

stand()
{
	sleep 200;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from box;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walk2();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
		}
	}
}

Go()
{
	Static_Var_3 = 1;
	Static_Var_5 = 1;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn box to y-axis <0.000000> speed <350.000000>;
	wait-for-turn box around y-axis;
	if( TRUE )
	{
		sleep 50;
	}
	if( TRUE )
	{
;
		sleep 50;
	}
	if( TRUE )
	{
		sleep 50;
	}
	if( TRUE )
	{
;
		sleep 50;
	}
	if( TRUE )
	{

		sleep 50;
	}
	sleep 50;
	Static_Var_3 = 0;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	bMoving = FALSE;
	Static_Var_3 = 0;
	Static_Var_4 = 1;
	Static_Var_1 = 0;
	call-script InitState();
	start-script MotionControl();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
	Static_Var_5 = 1;
	start-script Build2();
}

StopBuilding()
{
	start-script RequestState(1);
	Static_Var_5 = 0;
	Static_Var_6 = 0;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

QueryNanoPiece(piecenum)
{
	piecenum = flare1;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}
AimFromPrimary(piecenum)
{
	piecenum = box;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		explode leg1 type BITMAPONLY | BITMAP1;
		explode leg3 type BITMAPONLY | BITMAP3;
		explode leg4 type BITMAPONLY | BITMAP4;
		explode leg6 type BITMAPONLY | BITMAP1;
		explode box type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP3;
		explode leg1 type FALL | BITMAP1;
		explode leg3 type FALL | BITMAP3;
		explode leg4 type FALL | BITMAP4;
		explode leg6 type FALL | BITMAP1;
		explode box type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP3;
		explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode box type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP3;
	explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode box type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
