#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hydrolic, swivel, barrel, firept1, recoil;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

Activate()
{
	set ACTIVATION to 1;
	if( TRUE )
	{
		move hydrolic to y-axis [10.000000] speed [5.000000];
		wait-for-move hydrolic along z-axis;
		sleep 150;
	}
}

Deactivate()
{
	set ACTIVATION to 0;
	if( TRUE )
	{
		move hydrolic to y-axis [0.000000] speed [5.000000];
		wait-for-move hydrolic along z-axis;
		sleep 150;
	}
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Activate();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Deactivate();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
}

Create()
{
	hide firept1;
	cache hydrolic;
	cache base;
	dont-cache swivel;
	dont-cache recoil;
	dont-cache barrel;
	dont-cache firept1;
	Static_Var_2 = 0;
	Static_Var_1 = 2000;
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn hydrolic to y-axis heading speed <120.000000>;
	turn swivel to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn hydrolic around y-axis;
	wait-for-turn swivel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	sleep 100;
	emit-sfx 1024 + 0 from firept1;
	move recoil to z-axis [-10.200000] speed [100.000000];
	sleep 150;
	wait-for-move recoil along z-axis;
	move recoil to z-axis [0.000000] speed [3.000000];
	wait-for-move recoil along z-axis;
	sleep 100;
}

AimFromPrimary(piecenum)
{
	piecenum = swivel;
}

QueryPrimary(piecenum)
{
	piecenum = firept1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide firept1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode firept1 type BITMAPONLY | BITMAP2;
		explode swivel type BITMAPONLY | BITMAP3;
		explode recoil type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode firept1 type FALL | BITMAP2;
		explode swivel type SHATTER | BITMAP3;
		explode recoil type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode firept1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode swivel type SHATTER | BITMAP3;
		explode recoil type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode firept1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode swivel type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode recoil type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
