#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, baseb, nano1, nano2, nano3, nano4, nano5, plotg1,
       plotd1, plotg2, plotd2, plotg3, plotd3, pad, pad2, nanog1, nanog2,
       nanod1, nanod2, nanog1b, nanog2b, nanod1b, nanod2b, nanog1c, nanog2c,
       nanod1c, nanod2c, spot1, spot2, spot3, spot4, haut;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


Build()
{
	while( Static_Var_2 )
	{
		emit-sfx 1027 from nano1;
		emit-sfx 1027 from nano2;
		emit-sfx 1027 from nano3;
		emit-sfx 1027 from nano4;
		emit-sfx 1027 from nano5;
		sleep 100;
	}
}

Standby()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 100;
	}
	while( TRUE )
	{
		emit-sfx 1024 + 0 from spot1;
		sleep 1000;
		emit-sfx 1024 + 0 from spot2;
		sleep 1000;
		emit-sfx 1024 + 0 from spot3;
		sleep 1000;
		emit-sfx 1024 + 0 from spot4;
		sleep 1000;
	}
	start-script Standby();
}

activatescr()
{
	if( TRUE )
	{
		turn haut to x-axis <-90.016484> speed <100.000000>;
		move haut to z-axis [6.000000] speed [5.000000];
		wait-for-turn haut around x-axis;
		move plotg1 to x-axis [-10.000000] speed [8.000000];
		move plotd1 to x-axis [10.000000] speed [8.000000];
		sleep 750;
		move plotg2 to x-axis [-15.000000] speed [8.000000];
		move plotd2 to x-axis [15.000000] speed [8.000000];
		sleep 750;
		move plotg3 to x-axis [-15.000000] speed [8.000000];
		move plotd3 to x-axis [15.000000] speed [8.000000];
		wait-for-move plotg1 along x-axis;
		wait-for-move plotg2 along x-axis;
		wait-for-move plotg3 along x-axis;
		wait-for-move plotd1 along x-axis;
		wait-for-move plotd2 along x-axis;
		wait-for-move plotd3 along x-axis;
		turn nanog1 to z-axis <90.016484> speed <100.000000>;
		turn nanod1 to z-axis <-90.016484> speed <100.000000>;
		sleep 750;
		turn nanog2 to z-axis <90.016484> speed <100.000000>;
		turn nanod2 to z-axis <-90.016484> speed <100.000000>;
		wait-for-turn nanog1 around x-axis;
		wait-for-turn nanog2 around x-axis;
		wait-for-turn nanod1 around x-axis;
		wait-for-turn nanod2 around x-axis;
		turn nanog1b to z-axis <135.027473> speed <100.000000>;
		turn nanod1b to z-axis <-135.027473> speed <100.000000>;
		sleep 750;
		turn nanog2b to z-axis <135.027473> speed <100.000000>;
		turn nanod2b to z-axis <-135.027473> speed <100.000000>;
		wait-for-turn nanog1b around x-axis;
		wait-for-turn nanog2b around x-axis;
		wait-for-turn nanod1b around x-axis;
		wait-for-turn nanod1b around x-axis;
	}
	sleep 703;
}

deactivatescr()
{
	if( TRUE )
	{
		turn nanog2b to z-axis <0.000000> speed <100.000000>;
		turn nanod2b to z-axis <0.000000> speed <100.000000>;
		sleep 750;
		turn nanog1b to z-axis <0.000000> speed <100.000000>;
		turn nanod1b to z-axis <0.000000> speed <100.000000>;
		wait-for-turn nanog1b around x-axis;
		wait-for-turn nanog2b around x-axis;
		wait-for-turn nanod1b around x-axis;
		wait-for-turn nanod1b around x-axis;
		turn nanog2 to z-axis <0.000000> speed <100.000000>;
		turn nanod2 to z-axis <0.000000> speed <100.000000>;
		sleep 750;
		turn nanog1 to z-axis <0.000000> speed <100.000000>;
		turn nanod1 to z-axis <0.000000> speed <100.000000>;
		wait-for-turn nanog1 around x-axis;
		wait-for-turn nanog2 around x-axis;
		wait-for-turn nanod1 around x-axis;
		wait-for-turn nanod2 around x-axis;
		move plotg3 to x-axis [0.000000] speed [8.000000];
		move plotd3 to x-axis [0.000000] speed [8.000000];
		sleep 750;
		turn haut to x-axis <0.000000> speed <100.000000>;
		move haut to z-axis [0.000000] speed [5.000000];
		move plotg2 to x-axis [0.000000] speed [8.000000];
		move plotd2 to x-axis [0.000000] speed [8.000000];
		sleep 750;
		move plotg1 to x-axis [0.000000] speed [8.000000];
		move plotd1 to x-axis [0.000000] speed [8.000000];
	}
	sleep 200;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade baseb;
	dont-shade plotg1;
	dont-shade plotg2;
	dont-shade plotg3;
	dont-shade plotd1;
	dont-shade plotd2;
	dont-shade plotd3;
	dont-shade nanog1;
	dont-shade nanog2;
	dont-shade nanod1;
	dont-shade nanod2;
	Static_Var_1 = 1;
	call-script InitState();
	start-script SmokeUnit();
	start-script Standby();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 1 )
	{
		piecenum = nano1;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = nano2;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = nano3;
	}
	if( Static_Var_1 == 4 )
	{
		piecenum = nano4;
	}
	if( Static_Var_1 == 5 )
	{
		piecenum = nano5;
	}
	++Static_Var_1;
	if( Static_Var_1 == 6 )
	{
		Static_Var_1 = 1;
	}
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	Static_Var_2 = 1;
	start-script Build();
}

StopBuilding()
{
	Static_Var_2 = 0;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode nanog1 type BITMAPONLY | BITMAP1;
		explode nanog2 type BITMAPONLY | BITMAP2;
		explode nanod1 type BITMAPONLY | BITMAP3;
		explode nanod2 type BITMAPONLY | BITMAP4;
		explode nanod1b type BITMAPONLY | BITMAP5;
		explode nanod2b type BITMAPONLY | BITMAP1;
		explode nanog1b type BITMAPONLY | BITMAP2;
		explode nanog2b type BITMAPONLY | BITMAP3;
		explode baseb type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode pad type BITMAPONLY | BITMAP1;
		explode plotg1 type BITMAPONLY | BITMAP1;
		explode plotg2 type BITMAPONLY | BITMAP2;
		explode plotg3 type BITMAPONLY | BITMAP3;
		explode plotd1 type BITMAPONLY | BITMAP4;
		explode plotd2 type BITMAPONLY | BITMAP5;
		explode plotd3 type BITMAPONLY | BITMAP1;
		explode nanog1c type BITMAPONLY | BITMAP1;
		explode nanog2c type BITMAPONLY | BITMAP2;
		explode nanod1c type BITMAPONLY | BITMAP3;
		explode nanod2c type BITMAPONLY | BITMAP4;
		explode nano1 type BITMAPONLY | BITMAP1;
		explode nano2 type BITMAPONLY | BITMAP2;
		explode nano3 type BITMAPONLY | BITMAP3;
		explode nano4 type BITMAPONLY | BITMAP4;
		explode nano5 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode nanog1 type FALL | BITMAP1;
		explode nanog2 type FALL | BITMAP2;
		explode nanod1 type FALL | BITMAP3;
		explode nanod2 type FALL | BITMAP4;
		explode nanod1b type FALL | BITMAP5;
		explode nanod2b type FALL | BITMAP1;
		explode nanog1b type FALL | BITMAP2;
		explode nanog2b type FALL | BITMAP3;
		explode baseb type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode pad type BITMAPONLY | BITMAP1;
		explode plotg1 type FALL | BITMAP1;
		explode plotg2 type FALL | BITMAP2;
		explode plotg3 type FALL | BITMAP3;
		explode plotd1 type FALL | BITMAP4;
		explode plotd2 type FALL | BITMAP5;
		explode plotd3 type FALL | BITMAP1;
		explode nanog1c type FALL | BITMAP1;
		explode nanog2c type FALL | BITMAP2;
		explode nanod1c type FALL | BITMAP3;
		explode nanod2c type FALL | BITMAP4;
		explode nano1 type BITMAPONLY | BITMAP1;
		explode nano2 type BITMAPONLY | BITMAP2;
		explode nano3 type BITMAPONLY | BITMAP3;
		explode nano4 type BITMAPONLY | BITMAP4;
		explode nano5 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode nanog1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode nanog2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode nanod1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode nanod2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode nanod1b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode nanod2b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode nanog1b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode nanog2b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode baseb type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode pad type BITMAPONLY | BITMAP1;
		explode plotg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode plotg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode plotg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode plotd1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode plotd2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode plotd3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode nanog1c type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode nanog2c type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode nanod1c type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode nanod2c type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode nano1 type BITMAPONLY | BITMAP1;
		explode nano2 type BITMAPONLY | BITMAP2;
		explode nano3 type BITMAPONLY | BITMAP3;
		explode nano4 type BITMAPONLY | BITMAP4;
		explode nano5 type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode nanog1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode nanog2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode nanod1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode nanod2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode nanod1b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode nanod2b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode nanog1b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode nanog2b type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode baseb type BITMAPONLY | BITMAP4;
	explode base type BITMAPONLY | BITMAP5;
	explode pad type BITMAPONLY | BITMAP1;
	explode plotg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode plotg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode plotg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode plotd1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode plotd2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode plotd3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode nanog1c type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode nanog2c type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode nanod1c type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode nanod2c type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode nano1 type BITMAPONLY | BITMAP1;
	explode nano2 type BITMAPONLY | BITMAP2;
	explode nano3 type BITMAPONLY | BITMAP3;
	explode nano4 type BITMAPONLY | BITMAP4;
	explode nano5 type BITMAPONLY | BITMAP5;
}
