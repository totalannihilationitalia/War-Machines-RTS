#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, baseb, turret, canon1, canon2, flare1, flare2, laser,
       flarel1, flarel2, missil, miss1, miss2, roueg1, roueg2, roueg3,
       roued1, roued2, roued3, shell1, shell2, missileaim;

static-var  restore_delay, Static_Var_2, Static_Var_3, gun_1, gun_2,
            Static_Var_6, Static_Var_7;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

StartMoving()
{
	spin roueg1 around x-axis speed <100.016484>;
	spin roueg2 around x-axis speed <100.016484>;
	spin roueg3 around x-axis speed <100.016484>;
	spin roued1 around x-axis speed <100.016484>;
	spin roued2 around x-axis speed <100.016484>;
	spin roued3 around x-axis speed <100.016484>;
}

StopMoving()
{
	spin roueg1 around x-axis speed <0.000000>;
	spin roueg2 around x-axis speed <0.000000>;
	spin roueg3 around x-axis speed <0.000000>;
	spin roued1 around x-axis speed <0.000000>;
	spin roued2 around x-axis speed <0.000000>;
	spin roued3 around x-axis speed <0.000000>;
}

Create()
{
	start-script SmokeUnit();
	hide flarel1;
	hide flarel2;
	hide flare1;
	hide flare2;
	hide shell1;
	hide shell2;
	gun_1 = baseb;
	gun_2 = baseb;
	Static_Var_6 = 1;
	Static_Var_7 = 1;
	restore_delay = 3000;
}

TargetHeading(Func_Var_1)
{
	Static_Var_3 = 0 - Func_Var_1;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn canon1 to x-axis <0.000000> speed <100.000000>;
	turn canon2 to x-axis <0.000000> speed <100.000000>;
	turn turret to y-axis <0.000000> speed <70.000000>;
	turn laser to y-axis <0.000000> speed <100.000000>;
	wait-for-turn canon1 around x-axis;
	wait-for-turn canon2 around x-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn laser around y-axis;
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	turn missil to x-axis <0.000000> speed <100.000000>;
	wait-for-turn missil around x-axis;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <120.000000>;
	turn canon1 to x-axis <0.000000> - pitch speed <50.000000>;
	turn canon2 to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn laser around y-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn canon1 around x-axis;
	wait-for-turn canon2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn laser to y-axis heading speed <200.000000>;
	wait-for-turn laser around y-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn canon1 around x-axis;
	wait-for-turn canon2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn missil to x-axis <-75.016484> speed <100.000000>;
	wait-for-turn missil around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 1 )
	{
		move canon1 to z-axis [-2.000000] speed [20.000000];
		show shell1;
		explode shell1 type FALL;
		emit-sfx 1025 from flare1;
		move canon1 to z-axis [0.000000] speed [10.000000];
		gun_1 = turret;
		return (0);
	}
	if( gun_1 == 2 )
	{
		move canon2 to z-axis [-2.000000] speed [20.000000];
		show shell2;
		explode shell2 type FALL;
		emit-sfx 1025 from flare2;
		move canon2 to z-axis [0.000000] speed [10.000000];
		gun_1 = baseb;
		return (0);
	}
}

FireSecondary()
{
	if( gun_2 == 1 )
	{
		emit-sfx 1024 from flarel2;
		gun_2 = turret;
		return (0);
	}
	if( gun_2 == 2 )
	{
		emit-sfx 1024 from flarel1;
		gun_2 = baseb;
		return (0);
	}
}

FireTertiary()
{
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimFromSecondary(piecenum)
{
	piecenum = laser;
}

AimFromTertiary(piecenum)
{
	piecenum = missileaim;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare2;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 1 )
	{
		piecenum = flarel1;
	}
	if( gun_2 == 2 )
	{
		piecenum = flarel2;
	}
}

QueryTertiary(piecenum)
{
	if( Static_Var_6 == 1 )
	{
		piecenum = miss1;
	}
	if( Static_Var_6 == 2 )
	{
		piecenum = miss2;
	}
}

SweetSpot(piecenum)
{
	piecenum = baseb;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode baseb type BITMAPONLY | BITMAP5;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode laser type BITMAPONLY | BITMAP3;
		explode missil type BITMAPONLY | BITMAP5;
		explode canon1 type BITMAPONLY | BITMAP1;
		explode canon2 type BITMAPONLY | BITMAP2;
		explode roueg1 type BITMAPONLY | BITMAP3;
		explode roueg2 type BITMAPONLY | BITMAP4;
		explode roueg3 type BITMAPONLY | BITMAP5;
		explode roued1 type BITMAPONLY | BITMAP1;
		explode roued2 type BITMAPONLY | BITMAP2;
		explode roued3 type BITMAPONLY | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP2;
		explode flarel1 type BITMAPONLY | BITMAP3;
		explode flarel2 type BITMAPONLY | BITMAP5;
		explode miss1 type BITMAPONLY | BITMAP1;
		explode miss2 type BITMAPONLY | BITMAP2;
		explode shell1 type BITMAPONLY | BITMAP2;
		explode shell2 type BITMAPONLY | BITMAP3;
	explode missileaim type BITMAPONLY | BITMAP3;		
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode baseb type BITMAPONLY | BITMAP5;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type FALL | BITMAP2;
		explode laser type FALL | BITMAP3;
		explode missil type FALL | BITMAP5;
		explode canon1 type BITMAPONLY | BITMAP1;
		explode canon2 type BITMAPONLY | BITMAP2;
		explode roueg1 type FALL | BITMAP3;
		explode roueg2 type BITMAPONLY | BITMAP4;
		explode roueg3 type FALL | BITMAP5;
		explode roued1 type BITMAPONLY | BITMAP1;
		explode roued2 type FALL | BITMAP2;
		explode roued3 type FALL | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP2;
		explode flarel1 type BITMAPONLY | BITMAP3;
		explode flarel2 type BITMAPONLY | BITMAP5;
		explode miss1 type BITMAPONLY | BITMAP1;
		explode miss2 type BITMAPONLY | BITMAP2;
		explode shell1 type BITMAPONLY | BITMAP2;
		explode shell2 type BITMAPONLY | BITMAP3;
		explode missileaim type BITMAPONLY | BITMAP3;		
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode baseb type BITMAPONLY | BITMAP5;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode laser type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode missil type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode canon1 type BITMAPONLY | BITMAP1;
		explode canon2 type BITMAPONLY | BITMAP2;
		explode roueg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode roueg2 type BITMAPONLY | BITMAP4;
		explode roueg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode roued1 type BITMAPONLY | BITMAP1;
		explode roued2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode roued3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP2;
		explode flarel1 type BITMAPONLY | BITMAP3;
		explode flarel2 type BITMAPONLY | BITMAP5;
		explode miss1 type BITMAPONLY | BITMAP1;
		explode miss2 type BITMAPONLY | BITMAP2;
		explode shell1 type BITMAPONLY | BITMAP2;
		explode shell2 type BITMAPONLY | BITMAP3;
		explode missileaim type BITMAPONLY | BITMAP3;		
		return (0);
	}
	corpsetype = 3;
	explode baseb type BITMAPONLY | BITMAP5;
	explode base type BITMAPONLY | BITMAP1;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode laser type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode missil type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode canon1 type BITMAPONLY | BITMAP1;
	explode canon2 type BITMAPONLY | BITMAP2;
	explode roueg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode roueg2 type BITMAPONLY | BITMAP4;
	explode roueg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode roued1 type BITMAPONLY | BITMAP1;
	explode roued2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode roued3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare1 type BITMAPONLY | BITMAP1;
	explode flare2 type BITMAPONLY | BITMAP2;
	explode flarel1 type BITMAPONLY | BITMAP3;
	explode flarel2 type BITMAPONLY | BITMAP5;
	explode miss1 type BITMAPONLY | BITMAP1;
	explode miss2 type BITMAPONLY | BITMAP2;
	explode shell1 type BITMAPONLY | BITMAP2;
	explode shell2 type BITMAPONLY | BITMAP3;
	explode missileaim type BITMAPONLY | BITMAP3;
}
