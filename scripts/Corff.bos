#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, t1, t2, t3, t4, t5, t6, t7,
       t8, t9, t10, t11, frw, flw, rrw, rlw,
       bt1a, bt1b, bt2a, bt2b, bt3, bt4, bt5, bt6,
       bt7, bt8, bt9, bt10, bt11, fbt1, fbt2, fbt3,
       fbt4, fbt5, fbt6, fbt7, fbt8, fbt9, fbt10, fbt11,
       fbt12, fbt13, fbt14, fbt15, fbt16, fbt17, fbt18, fbt19,
       fbt20, fbt21, fbt22;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8, Static_Var_9, Static_Var_10,
            Static_Var_11, Static_Var_12, Static_Var_13;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 4 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from flw;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from rlw;
			}
			if( Func_Var_4 == 4 )
			{
				emit-sfx smoketype from rrw;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	turn frw to z-axis <0.000000> speed <50.027473>;
	turn flw to z-axis <0.000000> speed <50.027473>;
	turn rrw to z-axis <0.000000> speed <50.027473>;
	turn rlw to z-axis <0.000000> speed <50.027473>;
}

Stop()
{
	turn frw to z-axis <110.000000> speed <50.027473>;
	turn flw to z-axis <-110.000000> speed <50.027473>;
	turn rrw to z-axis <110.000000> speed <50.027473>;
	turn rlw to z-axis <-110.000000> speed <50.027473>;
}

InitState()
{
	Static_Var_12 = 1;
	Static_Var_13 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_13 )
	{
		Static_Var_12 = requestedstate;
		return (0);
	}
	Static_Var_13 = 1;
	currentstate = Static_Var_12;
	Static_Var_12 = requestedstate;
	while( Static_Var_12 != currentstate )
	{
		if( Static_Var_12 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_12 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_13 = 0;
}

RestorePrimary()
{
	set-signal-mask 2;
	sleep 5000;
	turn t2 to y-axis <0.000000> speed <100.000000>;
	turn bt2a to x-axis <0.000000> speed <80.000000>;
	turn bt2b to x-axis <0.000000> speed <80.000000>;
}

RestoreSecondary()
{
	set-signal-mask 8;
	sleep 1000;
	turn t3 to y-axis <0.000000> speed <150.000000>;
	turn bt3 to x-axis <0.000000> speed <130.000000>;
	turn t4 to y-axis <0.000000> speed <150.000000>;
	turn bt4 to x-axis <0.000000> speed <130.000000>;
	turn t5 to y-axis <0.000000> speed <150.000000>;
	turn bt5 to x-axis <0.000000> speed <130.000000>;
	turn t6 to y-axis <0.000000> speed <150.000000>;
	turn bt6 to x-axis <0.000000> speed <130.000000>;
	turn t7 to y-axis <0.000000> speed <150.000000>;
	turn bt7 to x-axis <0.000000> speed <130.000000>;
	turn t8 to y-axis <0.000000> speed <150.000000>;
	turn bt8 to x-axis <0.000000> speed <130.000000>;
	turn t9 to y-axis <0.000000> speed <150.000000>;
	turn bt9 to x-axis <0.000000> speed <130.000000>;
	turn t10 to y-axis <0.000000> speed <150.000000>;
	turn bt10 to x-axis <0.000000> speed <130.000000>;
	turn t11 to y-axis <0.000000> speed <150.000000>;
	turn bt11 to x-axis <0.000000> speed <130.000000>;
}

RestoreTertiary()
{
	set-signal-mask 4;
	sleep 5000;
	turn t1 to y-axis <0.000000> speed <100.000000>;
	turn bt1a to x-axis <0.000000> speed <80.000000>;
	turn bt1b to x-axis <0.000000> speed <80.000000>;
}

Create()
{
	hide fbt1;
	hide fbt2;
	hide fbt3;
	hide fbt4;
	hide fbt5;
	hide fbt6;
	hide fbt7;
	hide fbt8;
	hide fbt9;
	hide fbt10;
	hide fbt11;
	hide fbt12;
	hide fbt13;
	hide fbt14;
	hide fbt15;
	hide fbt16;
	hide fbt17;
	hide fbt18;
	hide fbt19;
	hide fbt20;
	hide fbt21;
	hide fbt22;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	Static_Var_11 = 0;
	Static_Var_1 = 0;
	Static_Var_3 = 0;
	Static_Var_2 = 0;
	Static_Var_7 = 0;
	Static_Var_8 = 0;
	Static_Var_9 = 0;
	Static_Var_10 = 0;
	call-script InitState();
	set ARMORED to 1;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	if( Static_Var_4 == 0 )
	{
		piecenum = fbt3;
	}
	if( Static_Var_4 == 1 )
	{
		piecenum = fbt4;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = t2;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn t2 to y-axis heading speed <100.148352>;
	turn bt2a to x-axis <0.000000> - pitch speed <80.137363>;
	turn bt2b to x-axis <0.000000> - pitch speed <80.137363>;
	wait-for-turn t2 around y-axis;
	wait-for-turn bt2a around x-axis;
	start-script RestorePrimary();
	return (1);
}

FirePrimary()
{
	if( Static_Var_4 == 0 )
	{
		show fbt3;
		move bt2a to z-axis [-2.400000] speed [1000.000000];
		sleep 100;
		hide fbt3;
		wait-for-move bt2a along z-axis;
		move bt2a to z-axis [0.000000] speed [10.000000];
	}
	if( Static_Var_4 == 1 )
	{
		show fbt4;
		move bt2b to z-axis [-2.400000] speed [1000.000000];
		sleep 100;
		hide fbt4;
		wait-for-move bt2b along z-axis;
		move bt2b to z-axis [0.000000] speed [10.000000];
	}
	Static_Var_4 = !Static_Var_4;
}

QuerySecondary(piecenum)
{
	if( Static_Var_10 == 1 )
	{
		if( Static_Var_11 == 1 )
		{
			piecenum = fbt13;
		}
		if( Static_Var_11 == 2 )
		{
			piecenum = fbt14;
		}
		if( Static_Var_11 == 3 )
		{
			piecenum = fbt11;
		}
		if( Static_Var_11 == 4 )
		{
			piecenum = fbt12;
		}
	}
	if( Static_Var_10 == 2 )
	{
		if( Static_Var_11 == 1 )
		{
			piecenum = fbt9;
		}
		if( Static_Var_11 == 2 )
		{
			piecenum = fbt10;
		}
		if( Static_Var_11 == 3 )
		{
			piecenum = fbt17;
		}
		if( Static_Var_11 == 4 )
		{
			piecenum = fbt18;
		}
		if( Static_Var_11 == 5 )
		{
			piecenum = fbt21;
		}
		if( Static_Var_11 == 6 )
		{
			piecenum = fbt22;
		}
	}
	if( Static_Var_10 == 3 )
	{
		if( Static_Var_11 == 1 )
		{
			piecenum = fbt5;
		}
		if( Static_Var_11 == 2 )
		{
			piecenum = fbt6;
		}
		if( Static_Var_11 == 3 )
		{
			piecenum = fbt7;
		}
		if( Static_Var_11 == 4 )
		{
			piecenum = fbt8;
		}
	}
	if( Static_Var_10 == 4 )
	{
		if( Static_Var_11 == 1 )
		{
			piecenum = fbt9;
		}
		if( Static_Var_11 == 2 )
		{
			piecenum = fbt10;
		}
		if( Static_Var_11 == 3 )
		{
			piecenum = fbt15;
		}
		if( Static_Var_11 == 4 )
		{
			piecenum = fbt16;
		}
		if( Static_Var_11 == 5 )
		{
			piecenum = fbt19;
		}
		if( Static_Var_11 == 6 )
		{
			piecenum = fbt20;
		}
	}
}

AimFromSecondary(piecenum)
{
	if( Static_Var_10 == 1 )
	{
		if( Static_Var_11 == 1 )
		{
			piecenum = t7;
		}
		if( Static_Var_11 == 2 )
		{
			piecenum = t7;
		}
		if( Static_Var_11 == 3 )
		{
			piecenum = t6;
		}
		if( Static_Var_11 == 4 )
		{
			piecenum = t6;
		}
	}
	if( Static_Var_10 == 2 )
	{
		if( Static_Var_11 == 1 )
		{
			piecenum = t5;
		}
		if( Static_Var_11 == 2 )
		{
			piecenum = t5;
		}
		if( Static_Var_11 == 3 )
		{
			piecenum = t9;
		}
		if( Static_Var_11 == 4 )
		{
			piecenum = t9;
		}
		if( Static_Var_11 == 5 )
		{
			piecenum = t11;
		}
		if( Static_Var_11 == 6 )
		{
			piecenum = t11;
		}
	}
	if( Static_Var_10 == 3 )
	{
		if( Static_Var_11 == 1 )
		{
			piecenum = t3;
		}
		if( Static_Var_11 == 2 )
		{
			piecenum = t3;
		}
		if( Static_Var_11 == 3 )
		{
			piecenum = t4;
		}
		if( Static_Var_11 == 4 )
		{
			piecenum = t4;
		}
	}
	if( Static_Var_10 == 4 )
	{
		if( Static_Var_11 == 1 )
		{
			piecenum = t5;
		}
		if( Static_Var_11 == 2 )
		{
			piecenum = t5;
		}
		if( Static_Var_11 == 3 )
		{
			piecenum = t8;
		}
		if( Static_Var_11 == 4 )
		{
			piecenum = t8;
		}
		if( Static_Var_11 == 5 )
		{
			piecenum = t10;
		}
		if( Static_Var_11 == 6 )
		{
			piecenum = t10;
		}
	}
}

AimSecondary(heading, pitch)
{
	signal 8;
	set-signal-mask 8;
	if( heading < 8190 )
	{
		Static_Var_10 = 1;
		if( Static_Var_11 == 1 )
		{
			turn t7 to y-axis heading speed <900.000000>;
			turn bt7 to x-axis <0.000000> - pitch speed <200.000000>;
			wait-for-turn t7 around y-axis;
		}
		if( Static_Var_11 == 2 )
		{
			turn t7 to y-axis heading speed <900.000000>;
			turn bt7 to x-axis <0.000000> - pitch speed <200.000000>;
			wait-for-turn t7 around y-axis;
		}
		if( Static_Var_11 == 3 )
		{
			turn t6 to y-axis heading speed <900.000000>;
			turn bt6 to x-axis <0.000000> - pitch speed <200.000000>;
			wait-for-turn t6 around y-axis;
		}
		if( Static_Var_11 == 4 )
		{
			turn t6 to y-axis heading speed <900.000000>;
			turn bt6 to x-axis <0.000000> - pitch speed <200.000000>;
			wait-for-turn t6 around y-axis;
		}
		if( Static_Var_11 > 4 )
		{
			sleep 66;
			Static_Var_11 = 1;
		}
	}
	if( heading >= 8190 )
	{
		if( heading <= 24570 )
		{
			Static_Var_10 = 2;
			if( Static_Var_11 == 1 )
			{
				turn t5 to y-axis heading speed <900.000000>;
				turn bt5 to x-axis <0.000000> - pitch speed <200.000000>;
				wait-for-turn t5 around y-axis;
			}
			if( Static_Var_11 == 2 )
			{
				turn t5 to y-axis heading speed <900.000000>;
				turn bt5 to x-axis <0.000000> - pitch speed <200.000000>;
				wait-for-turn t5 around y-axis;
			}
			if( Static_Var_11 == 3 )
			{
				turn t9 to y-axis heading speed <900.000000>;
				turn bt9 to x-axis <0.000000> - pitch speed <200.000000>;
				wait-for-turn t9 around y-axis;
			}
			if( Static_Var_11 == 4 )
			{
				turn t9 to y-axis heading speed <900.000000>;
				turn bt9 to x-axis <0.000000> - pitch speed <200.000000>;
				wait-for-turn t9 around y-axis;
			}
			if( Static_Var_11 == 5 )
			{
				turn t11 to y-axis heading speed <900.000000>;
				turn bt11 to x-axis <0.000000> - pitch speed <200.000000>;
				wait-for-turn t11 around y-axis;
			}
			if( Static_Var_11 == 6 )
			{
				turn t11 to y-axis heading speed <900.000000>;
				turn bt11 to x-axis <0.000000> - pitch speed <200.000000>;
				wait-for-turn t11 around y-axis;
			}
		}
		if( heading > 24570 )
		{
			if( heading < 40950 )
			{
				Static_Var_10 = 3;
				if( Static_Var_11 == 1 )
				{
					turn t3 to y-axis heading - <180.000000> speed <900.000000>;
					turn bt3 to x-axis <0.000000> - pitch speed <200.000000>;
					wait-for-turn t3 around y-axis;
				}
				if( Static_Var_11 == 2 )
				{
					turn t3 to y-axis heading - <180.000000> speed <900.000000>;
					turn bt3 to x-axis <0.000000> - pitch speed <200.000000>;
					wait-for-turn t3 around y-axis;
				}
				if( Static_Var_11 == 3 )
				{
					turn t4 to y-axis heading - <180.000000> speed <900.000000>;
					turn bt4 to x-axis <0.000000> - pitch speed <200.000000>;
					wait-for-turn t4 around y-axis;
				}
				if( Static_Var_11 == 4 )
				{
					turn t4 to y-axis heading - <180.000000> speed <900.000000>;
					turn bt4 to x-axis <0.000000> - pitch speed <200.000000>;
					wait-for-turn t4 around y-axis;
				}
				if( Static_Var_11 > 4 )
				{
					Static_Var_11 = 1;
				}
			}
			if( heading >= 40950 )
			{
				if( heading <= 57330 )
				{
					Static_Var_10 = 4;
					if( Static_Var_11 == 1 )
					{
						turn t5 to y-axis heading speed <900.000000>;
						turn bt5 to x-axis <0.000000> - pitch speed <200.000000>;
						wait-for-turn t5 around y-axis;
					}
					if( Static_Var_11 == 2 )
					{
						turn t5 to y-axis heading speed <900.000000>;
						turn bt5 to x-axis <0.000000> - pitch speed <200.000000>;
						wait-for-turn t5 around y-axis;
					}
					if( Static_Var_11 == 3 )
					{
						turn t8 to y-axis heading speed <900.000000>;
						turn bt8 to x-axis <0.000000> - pitch speed <200.000000>;
						wait-for-turn t8 around y-axis;
					}
					if( Static_Var_11 == 4 )
					{
						turn t8 to y-axis heading speed <900.000000>;
						turn bt8 to x-axis <0.000000> - pitch speed <200.000000>;
						wait-for-turn t8 around y-axis;
					}
					if( Static_Var_11 == 5 )
					{
						turn t10 to y-axis heading speed <900.000000>;
						turn bt10 to x-axis <0.000000> - pitch speed <200.000000>;
						wait-for-turn t10 around y-axis;
					}
					if( Static_Var_11 == 6 )
					{
						turn t10 to y-axis heading speed <900.000000>;
						turn bt10 to x-axis <0.000000> - pitch speed <200.000000>;
						wait-for-turn t10 around y-axis;
					}
				}
				if( heading > 57330 )
				{
					Static_Var_10 = 1;
					if( Static_Var_11 == 1 )
					{
						turn t7 to y-axis heading speed <900.000000>;
						turn bt7 to x-axis <0.000000> - pitch speed <200.000000>;
						wait-for-turn t7 around y-axis;
					}
					if( Static_Var_11 == 2 )
					{
						turn t7 to y-axis heading speed <900.000000>;
						turn bt7 to x-axis <0.000000> - pitch speed <200.000000>;
						wait-for-turn t7 around y-axis;
					}
					if( Static_Var_11 == 3 )
					{
						turn t6 to y-axis heading speed <900.000000>;
						turn bt6 to x-axis <0.000000> - pitch speed <200.000000>;
						wait-for-turn t6 around y-axis;
					}
					if( Static_Var_11 == 4 )
					{
						turn t6 to y-axis heading speed <900.000000>;
						turn bt6 to x-axis <0.000000> - pitch speed <200.000000>;
						wait-for-turn t6 around y-axis;
					}
					if( Static_Var_11 > 4 )
					{
						sleep 66;
						Static_Var_11 = 1;
					}
				}
			}
		}
	}
	start-script RestoreSecondary();
	return (1);
}

FireSecondary()
{
	if( Static_Var_10 == 1 )
	{
		if( Static_Var_11 == 1 )
		{
			show fbt13;
			sleep 50;
			hide fbt13;
		}
		if( Static_Var_11 == 2 )
		{
			show fbt14;
			sleep 50;
			hide fbt14;
		}
		if( Static_Var_11 == 3 )
		{
			show fbt11;
			sleep 50;
			hide fbt11;
		}
		if( Static_Var_11 == 4 )
		{
			show fbt12;
			sleep 50;
			hide fbt12;
		}
		++Static_Var_11;
		if( Static_Var_11 > 4 )
		{
			sleep 66;
			Static_Var_11 = 1;
		}
	}
	if( Static_Var_10 == 2 )
	{
		if( Static_Var_11 == 1 )
		{
			show fbt9;
			sleep 50;
			hide fbt9;
		}
		if( Static_Var_11 == 2 )
		{
			show fbt10;
			sleep 50;
			hide fbt10;
		}
		if( Static_Var_11 == 3 )
		{
			show fbt17;
			sleep 50;
			hide fbt17;
		}
		if( Static_Var_11 == 4 )
		{
			show fbt18;
			sleep 50;
			hide fbt18;
		}
		if( Static_Var_11 == 5 )
		{
			show fbt21;
			sleep 50;
			hide fbt21;
		}
		if( Static_Var_11 == 6 )
		{
			show fbt22;
			sleep 50;
			hide fbt22;
		}
		++Static_Var_11;
		if( Static_Var_11 > 6 )
		{
			Static_Var_11 = 1;
		}
	}
	if( Static_Var_10 == 3 )
	{
		if( Static_Var_11 == 1 )
		{
			show fbt5;
			sleep 50;
			hide fbt5;
		}
		if( Static_Var_11 == 2 )
		{
			show fbt6;
			sleep 50;
			hide fbt6;
		}
		if( Static_Var_11 == 3 )
		{
			show fbt7;
			sleep 50;
			hide fbt7;
		}
		if( Static_Var_11 == 4 )
		{
			show fbt8;
			sleep 50;
			hide fbt8;
		}
		++Static_Var_11;
		if( Static_Var_11 > 4 )
		{
			sleep 66;
			Static_Var_11 = 1;
		}
	}
	if( Static_Var_10 == 4 )
	{
		if( Static_Var_11 == 1 )
		{
			show fbt9;
			sleep 50;
			hide fbt9;
		}
		if( Static_Var_11 == 2 )
		{
			show fbt10;
			sleep 50;
			hide fbt10;
		}
		if( Static_Var_11 == 3 )
		{
			show fbt15;
			sleep 50;
			hide fbt15;
		}
		if( Static_Var_11 == 4 )
		{
			show fbt16;
			sleep 50;
			hide fbt16;
		}
		if( Static_Var_11 == 5 )
		{
			show fbt19;
			sleep 50;
			hide fbt19;
		}
		if( Static_Var_11 == 6 )
		{
			show fbt20;
			sleep 50;
			hide fbt20;
		}
		++Static_Var_11;
		if( Static_Var_11 > 6 )
		{
			Static_Var_11 = 1;
		}
	}
}

QueryTertiary(piecenum)
{
	if( Static_Var_5 == 0 )
	{
		piecenum = fbt1;
	}
	if( Static_Var_5 == 1 )
	{
		piecenum = fbt2;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = t1;
}

AimTertiary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	if( heading >= 16198 )
	{
		if( heading < 48958 )
		{
			sleep 100;
			start-script RestoreTertiary();
			return (0);
		}
		if( heading >= 48958 )
		{
			turn t1 to y-axis heading speed <75.000000>;
			wait-for-turn t1 around y-axis;
			turn bt1a to x-axis <0.000000> - pitch speed <30.000000>;
			turn bt1b to x-axis <0.000000> - pitch speed <30.000000>;
			wait-for-turn bt1a around x-axis;
		}
	}
	if( heading < 16198 )
	{
		turn t1 to y-axis heading speed <75.000000>;
		wait-for-turn t1 around y-axis;
		turn bt1a to x-axis <0.000000> - pitch speed <30.000000>;
		turn bt1b to x-axis <0.000000> - pitch speed <30.000000>;
		wait-for-turn bt1a around x-axis;
	}
	start-script RestoreTertiary();
	return (1);
}

FireTertiary()
{
	if( Static_Var_5 == 0 )
	{
		show fbt1;
		move bt1a to z-axis [-2.400000] speed [500.000000];
		sleep 100;
		hide fbt1;
		wait-for-move bt1a along z-axis;
		move bt1a to z-axis [0.000000] speed [3.000000];
	}
	if( Static_Var_5 == 1 )
	{
		show fbt2;
		move bt1b to z-axis [-2.400000] speed [500.000000];
		sleep 100;
		hide fbt2;
		wait-for-move bt1b along z-axis;
		move bt1b to z-axis [0.000000] speed [3.000000];
	}
	++Static_Var_5;
	if( Static_Var_5 == 2 )
	{
		Static_Var_5 = 0;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | BITMAP4;
		explode t1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode frw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rlw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rrw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode t1 type SHATTER | BITMAP4;
		explode t3 type SHATTER | BITMAP4;
		explode t5 type SHATTER | BITMAP4;
		explode t6 type SHATTER | BITMAP4;
		explode t7 type SHATTER | BITMAP4;
		explode t8 type SHATTER | BITMAP4;
		explode t9 type SHATTER | BITMAP4;
		explode t10 type SHATTER | BITMAP4;
		explode t11 type SHATTER | BITMAP4;
		explode bt1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode frw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rlw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rrw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP4;
		explode t1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode t3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode t5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode t6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode t7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode t8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode t9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode t10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode t11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bt1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bt1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bt2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bt2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bt3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bt4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bt5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bt6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bt7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bt8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bt9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bt10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bt11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode frw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rlw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rrw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | BITMAP4;
	explode t1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode t11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt1a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt1b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt2a type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt2b type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt9 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bt11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode frw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rlw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rrw type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
