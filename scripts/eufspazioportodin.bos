#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, Armhvytransp_1, Armhvytransp_2, Armhvytransp_3, portellone_1,
       portellone_2, portellone_3, luce1, luce2, luce3, luce4, luce5, luce6,
       luce7, luce8, luce_costruzione1, luce_costruzione2, pad1_1, pad1_2, pad1_3, pad2_1,
       pad2_2, pad2_3, pad3_1, pad3_2, pad3_3;

static-var  spray, unitviewer, statechg_DesiredState, Static_Var_4, statechg_StateChanging,
            Static_Var_6, Static_Var_7, Static_Var_8;

// Signal definitions
#define SIG_ACTIVATE			2


Build()
{
	while( Static_Var_4 )
	{
		emit-sfx 1025 from luce_costruzione1;
		sleep 2000;
		emit-sfx 1025 from luce_costruzione2;
		sleep 2000;
	}
}

luci_sopra()
{
	while( Static_Var_8 )
	{
		emit-sfx 1024 from luce1;
		sleep 1000;
		emit-sfx 1024 from luce2;
		sleep 1000;
		emit-sfx 1024 from luce3;
		sleep 1000;
		emit-sfx 1024 from luce4;
		sleep 1000;
		emit-sfx 1024 from luce5;
		sleep 1000;
		emit-sfx 1024 from luce6;
		sleep 1000;
		emit-sfx 1024 from luce7;
		sleep 1000;
		emit-sfx 1024 from luce8;
		sleep 1000;
	}
}

luci_pad()
{
	while( Static_Var_8 )
	{
		emit-sfx 1026 from pad1_1;
		emit-sfx 1026 from pad1_2;
		emit-sfx 1026 from pad1_3;
		sleep 500;
		emit-sfx 1026 from pad2_1;
		emit-sfx 1026 from pad2_2;
		emit-sfx 1026 from pad2_3;
		sleep 500;
		emit-sfx 1026 from pad3_1;
		emit-sfx 1026 from pad3_2;
		emit-sfx 1026 from pad3_3;
		sleep 500;
	}
}

Movimentonavi()
{
	while( Static_Var_6 == 1 )
	{
		if( Static_Var_6 == 1 )
		{
			sleep 20000;
		}
		if( Static_Var_6 == 1 )
		{
			move Armhvytransp_3 to y-axis [700.000000] speed [20.000000];
			turn portellone_3 to z-axis <0.000000> speed <30.000000>;
			wait-for-move Armhvytransp_3 along y-axis;
			hide Armhvytransp_3;
			hide portellone_3;
			sleep 20000;
		}
		if( Static_Var_6 == 1 )
		{
			show portellone_2;
			show Armhvytransp_2;
			move Armhvytransp_2 to y-axis [200.000000] speed [50.000000];
			wait-for-move Armhvytransp_2 along y-axis;
			move Armhvytransp_2 to y-axis [120.000000] speed [35.000000];
			wait-for-move Armhvytransp_2 along y-axis;
			move Armhvytransp_2 to y-axis [80.000000] speed [25.000000];
			turn portellone_2 to z-axis <-125.000000> speed <30.000000>;
			wait-for-move Armhvytransp_2 along y-axis;
			move Armhvytransp_2 to y-axis [0.000000] speed [10.000000];
			turn Armhvytransp_2 to z-axis <0.000000> speed <5.000000>;
			sleep 20000;
		}
		if( Static_Var_6 == 1 )
		{
			show portellone_3;
			show Armhvytransp_3;
			move Armhvytransp_3 to y-axis [200.000000] speed [50.000000];
			wait-for-move Armhvytransp_3 along y-axis;
			move Armhvytransp_3 to y-axis [120.000000] speed [35.000000];
			wait-for-move Armhvytransp_2 along y-axis;
			move Armhvytransp_3 to y-axis [80.000000] speed [25.000000];
			turn portellone_3 to z-axis <125.000000> speed <30.000000>;
			wait-for-move Armhvytransp_3 along y-axis;
			move Armhvytransp_3 to y-axis [0.000000] speed [10.000000];
			turn Armhvytransp_3 to z-axis <0.000000> speed <5.000000>;
			sleep 20000;
		}
		if( Static_Var_6 == 1 )
		{
			move Armhvytransp_2 to y-axis [700.000000] speed [20.000000];
			turn portellone_2 to z-axis <0.000000> speed <30.000000>;
			wait-for-move Armhvytransp_2 along y-axis;
			hide Armhvytransp_2;
			hide portellone_2;
			sleep 20000;
		}
	}
}

Riposizionamentonavi()
{
	while( Static_Var_6 == 0 )
	{
		move Armhvytransp_2 to y-axis [700.000000] speed [20.000000];
		turn portellone_2 to z-axis <0.000000> speed <30.000000>;
		sleep 1000;
		move Armhvytransp_3 to y-axis [700.000000] speed [20.000000];
		turn portellone_3 to z-axis <0.000000> speed <30.000000>;
		wait-for-move Armhvytransp_2 along y-axis;
		hide Armhvytransp_2;
		hide portellone_2;
		turn Armhvytransp_2 to z-axis <-15.000000> now;
		wait-for-move Armhvytransp_3 along y-axis;
		hide Armhvytransp_3;
		hide portellone_3;
		turn Armhvytransp_3 to z-axis <15.000000> now;
	}
	sleep 5000;
}

activatescr()
{
	if( TRUE )
	{
		sleep 3000;
		show portellone_1;
		show Armhvytransp_1;
		move Armhvytransp_1 to y-axis [200.000000] speed [50.000000];
		wait-for-move Armhvytransp_1 along y-axis;
		move Armhvytransp_1 to y-axis [120.000000] speed [35.000000];
		wait-for-move Armhvytransp_1 along y-axis;
		move Armhvytransp_1 to y-axis [80.000000] speed [25.000000];
		turn portellone_1 to x-axis <-125.000000> speed <30.000000>;
		wait-for-move Armhvytransp_1 along y-axis;
		move Armhvytransp_1 to y-axis [0.000000] speed [10.000000];
		turn Armhvytransp_1 to x-axis <0.000000> speed <5.000000>;
		wait-for-move Armhvytransp_1 along y-axis;
		show portellone_1;
		show Armhvytransp_1;
		Static_Var_6 = 1;
		start-script Movimentonavi();
	}
}

deactivatescr()
{
	if( TRUE )
	{
		Static_Var_6 = 0;
		wait-for-move Armhvytransp_1 along y-axis;
		sleep 7000;
		move Armhvytransp_1 to y-axis [700.000000] speed [20.000000];
		turn portellone_1 to x-axis <0.000000> speed <30.000000>;
		sleep 300;
		start-script Riposizionamentonavi();
		wait-for-move Armhvytransp_1 along y-axis;
		hide Armhvytransp_1;
		hide portellone_1;
		turn Armhvytransp_1 to x-axis <-15.000000> now;
	}
	sleep 34;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 4 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 4 )
			{
				emit-sfx smoketype from base;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache beam1;
	dont-cache beam2;
	dont-cache portellone_1;
	dont-cache portellone_2;
	dont-cache portellone_3;
	dont-cache pad;
	dont-cache Armhvytransp_1;
	dont-cache Armhvytransp_2;
	dont-cache Armhvytransp_3;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beam1;
	cache beam2;
	cache portellone_1;
	cache portellone_2;
	cache portellone_3;
	cache pad;
	cache Armhvytransp_1;
	cache Armhvytransp_2;
	cache Armhvytransp_3;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide Armhvytransp_1;
	hide Armhvytransp_2;
	hide Armhvytransp_3;
	hide portellone_1;
	hide portellone_2;
	hide portellone_3;
	dont-shade beam1;
	dont-shade beam2;
	dont-shade Armhvytransp_1;
	dont-shade Armhvytransp_2;
	dont-shade Armhvytransp_3;
	dont-shade pad;
	dont-shade portellone_1;
	dont-shade portellone_2;
	dont-shade portellone_3;
	turn Armhvytransp_1 to x-axis <-15.000000> now;
	turn Armhvytransp_2 to z-axis <-15.000000> now;
	turn Armhvytransp_3 to z-axis <15.000000> now;
	move Armhvytransp_1 to y-axis [700.000000] now;
	move Armhvytransp_2 to y-axis [700.000000] now;
	move Armhvytransp_3 to y-axis [700.000000] now;
	unitviewer = FALSE;
	spray = base;
	call-script InitState();
	start-script SmokeUnit();
	Static_Var_8 = 1;
	start-script luci_sopra();
	start-script luci_pad();
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray != 0 )
	{
		piecenum = beam2;
	}
	spray = !spray;
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <0.000000>;
	Static_Var_4 = 1;
	start-script Build();
}

StopBuilding()
{
	stop-spin pad around y-axis;
	Static_Var_4 = 0;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode portellone_1 type BITMAPONLY | BITMAP4;
		explode portellone_2 type BITMAPONLY | BITMAP5;
		explode portellone_3 type BITMAPONLY | BITMAP1;
		explode pad type BITMAPONLY | BITMAP3;
		explode Armhvytransp_1 type BITMAPONLY | BITMAP4;
		explode Armhvytransp_2 type BITMAPONLY | BITMAP5;
		explode Armhvytransp_3 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | FIRE | BITMAP2;
		explode beam2 type FALL | SMOKE | BITMAP3;
		explode portellone_1 type BITMAPONLY | BITMAP5;
		explode portellone_2 type SHATTER | BITMAP1;
		explode portellone_3 type SHATTER | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode Armhvytransp_1 type BITMAPONLY | BITMAP5;
		explode Armhvytransp_2 type BITMAPONLY | BITMAP1;
		explode Armhvytransp_3 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode portellone_1 type BITMAPONLY | BITMAP5;
		explode portellone_2 type SHATTER | BITMAP1;
		explode portellone_3 type SHATTER | BITMAP2;
		explode pad type BITMAPONLY | BITMAP3;
		explode Armhvytransp_1 type BITMAPONLY | BITMAP5;
		explode Armhvytransp_2 type BITMAPONLY | BITMAP1;
		explode Armhvytransp_3 type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode portellone_1 type BITMAPONLY | BITMAP4;
	explode portellone_2 type BITMAPONLY | BITMAP5;
	explode portellone_3 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode pad type BITMAPONLY | BITMAP3;
	explode Armhvytransp_1 type BITMAPONLY | BITMAP4;
	explode Armhvytransp_2 type BITMAPONLY | BITMAP5;
	explode Armhvytransp_3 type BITMAPONLY | BITMAP1;
}
