#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, pole, head, pivot, arm, pivot1, arm1,
       pivot2, arm2, pivot3, arm3, pivot4, arm4, gun, point1,
       point2, point3, point4, arm5, pivot5, arm6, pivot6;

static-var  restore_delay, Static_Var_2, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	turn pivot to y-axis <-40.005495> speed <190.000000>;
	turn pivot1 to y-axis <40.005495> speed <190.000000>;
	turn pivot2 to y-axis <-40.005495> speed <190.000000>;
	turn pivot3 to y-axis <40.005495> speed <190.000000>;
	turn pivot4 to x-axis <40.005495> speed <190.000000>;
	turn pivot5 to y-axis <40.005495> speed <190.000000>;
	turn pivot6 to y-axis <-40.005495> speed <190.000000>;
	turn arm to y-axis <40.005495> speed <190.000000>;
	turn arm1 to y-axis <-40.005495> speed <190.000000>;
	turn arm2 to y-axis <40.005495> speed <190.000000>;
	turn arm3 to y-axis <-40.005495> speed <190.000000>;
	turn arm4 to x-axis <-40.005495> speed <190.000000>;
	turn arm5 to y-axis <-40.005495> speed <190.000000>;
	turn arm6 to y-axis <40.005495> speed <190.000000>;
	wait-for-turn pivot around y-axis;
	turn pivot to y-axis <-120.027473> speed <190.000000>;
	turn pivot1 to y-axis <120.027473> speed <190.000000>;
	turn pivot2 to y-axis <-120.027473> speed <190.000000>;
	turn pivot3 to y-axis <120.027473> speed <190.000000>;
	turn pivot4 to x-axis <120.027473> speed <190.000000>;
	turn pivot5 to y-axis <120.027473> speed <190.000000>;
	turn pivot6 to y-axis <-120.027473> speed <190.000000>;
	turn arm to y-axis <100.021978> speed <190.000000>;
	turn arm1 to y-axis <-100.021978> speed <190.000000>;
	turn arm2 to y-axis <100.021978> speed <190.000000>;
	turn arm3 to y-axis <-100.021978> speed <190.000000>;
	turn arm4 to x-axis <-100.021978> speed <190.000000>;
	turn arm5 to y-axis <-100.021978> speed <190.000000>;
	turn arm6 to y-axis <100.021978> speed <190.000000>;
	wait-for-turn arm around y-axis;
	move gun to z-axis [0.000000] speed [10.000000];
	wait-for-move gun along z-axis;
	Static_Var_2 = 1;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	Static_Var_2 = 0;
	move gun to z-axis [-5.000000] speed [10.000000];
	wait-for-move gun along z-axis;
	turn pivot to y-axis <0.000000> speed <20.000000>;
	turn pivot1 to y-axis <0.000000> speed <20.000000>;
	turn pivot2 to y-axis <0.000000> speed <20.000000>;
	turn pivot3 to y-axis <0.000000> speed <20.000000>;
	turn pivot4 to x-axis <0.000000> speed <20.000000>;
	turn pivot5 to y-axis <0.000000> speed <20.000000>;
	turn pivot6 to y-axis <0.000000> speed <20.000000>;
	turn arm to y-axis <0.000000> speed <20.000000>;
	turn arm1 to y-axis <0.000000> speed <20.000000>;
	turn arm2 to y-axis <0.000000> speed <20.000000>;
	turn arm3 to y-axis <0.000000> speed <20.000000>;
	turn arm4 to x-axis <0.000000> speed <20.000000>;
	turn arm5 to y-axis <0.000000> speed <20.000000>;
	turn arm6 to y-axis <0.000000> speed <20.000000>;
	wait-for-turn arm around y-axis;
	wait-for-turn pivot around y-axis;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	call-script activatescr();
}

Stop()
{
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide flare;
	dont-cache flare;
	dont-cache arm;
	dont-cache arm1;
	dont-cache arm2;
	dont-cache arm3;
	dont-cache arm4;
	dont-cache arm5;
	dont-cache arm6;
	dont-cache pivot;
	dont-cache pivot1;
	dont-cache pivot2;
	dont-cache pivot3;
	dont-cache pivot4;
	dont-cache pivot5;
	dont-cache pivot6;
	dont-cache gun;
	dont-cache pole;
	dont-cache head;
	turn point1 to z-axis <-45.010989> now;
	turn point2 to z-axis <45.010989> now;
	turn point3 to z-axis <-45.010989> now;
	turn point4 to z-axis <45.010989> now;
	move gun to z-axis [-5.000000] now;
	Static_Var_2 = 0;
	spin flare around z-axis speed <250.060440>;
	call-script InitState();
	start-script SmokeUnit();
	restore_delay = 10000;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = 10000;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn pole to y-axis <0.000000> speed <10.000000>;
	turn head to x-axis <0.000000> speed <10.000000>;
	wait-for-turn pole around y-axis;
	wait-for-turn head around x-axis;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimFromPrimary(piecenum)
{
	piecenum = head;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	while( !Static_Var_2 )
	{
		sleep 100;
	}
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn pole to y-axis heading speed <100.000000>;
	turn head to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn pole around y-axis;
	wait-for-turn head around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	turn pivot to y-axis <-80.016484> speed <500.000000>;
	turn pivot1 to y-axis <80.016484> speed <500.000000>;
	turn pivot2 to y-axis <-80.016484> speed <500.000000>;
	turn pivot3 to y-axis <80.016484> speed <500.000000>;
	turn pivot4 to x-axis <80.016484> speed <500.000000>;
	turn pivot5 to y-axis <80.016484> speed <500.000000>;
	turn pivot6 to y-axis <-80.016484> speed <500.000000>;
	turn arm to y-axis <40.005495> speed <500.000000>;
	turn arm1 to y-axis <-40.005495> speed <500.000000>;
	turn arm2 to y-axis <40.005495> speed <500.000000>;
	turn arm3 to y-axis <-40.005495> speed <500.000000>;
	turn arm4 to x-axis <-40.005495> speed <500.000000>;
	turn arm5 to y-axis <-40.005495> speed <500.000000>;
	turn arm6 to y-axis <40.005495> speed <500.000000>;
	move gun to z-axis [-5.000000] speed [500.000000];
	show flare;
	sleep 150;
	hide flare;
	wait-for-turn pivot around y-axis;
	sleep 250;
	turn pivot to y-axis <-120.027473> speed <200.000000>;
	turn pivot1 to y-axis <120.027473> speed <200.000000>;
	turn pivot2 to y-axis <-120.027473> speed <200.000000>;
	turn pivot3 to y-axis <120.027473> speed <200.000000>;
	turn pivot4 to x-axis <120.027473> speed <200.000000>;
	turn pivot5 to y-axis <120.027473> speed <200.000000>;
	turn pivot6 to y-axis <-120.027473> speed <200.000000>;
	turn arm to y-axis <100.021978> speed <300.000000>;
	turn arm1 to y-axis <-100.021978> speed <300.000000>;
	turn arm2 to y-axis <100.021978> speed <300.000000>;
	turn arm3 to y-axis <-100.021978> speed <300.000000>;
	turn arm4 to x-axis <-100.021978> speed <300.000000>;
	turn arm5 to y-axis <-100.021978> speed <300.000000>;
	turn arm6 to y-axis <100.021978> speed <300.000000>;
	move gun to z-axis [0.000000] speed [5.000000];
	wait-for-turn arm around y-axis;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm type BITMAPONLY | BITMAP1;
		explode arm1 type BITMAPONLY | BITMAP1;
		explode arm2 type BITMAPONLY | BITMAP1;
		explode arm3 type BITMAPONLY | BITMAP1;
		explode arm4 type BITMAPONLY | BITMAP1;
		explode arm5 type BITMAPONLY | BITMAP1;
		explode arm6 type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode head type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm type FALL | SMOKE | BITMAP1;
		explode arm1 type FALL | SMOKE | BITMAP1;
		explode arm2 type FALL | SMOKE | BITMAP1;
		explode arm3 type FALL | SMOKE | BITMAP1;
		explode arm4 type FALL | SMOKE | BITMAP1;
		explode arm5 type FALL | SMOKE | BITMAP1;
		explode arm6 type FALL | SMOKE | BITMAP1;
		explode gun type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode head type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode arm3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode arm4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode arm5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode arm6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode head type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode arm3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode arm4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode arm5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode arm6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode head type SHATTER | FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
