// Core Acolyte Absorbtion Alien -cLONe- Script by Ninjato of sWs & Blackthorn of TADD

piece	base,hips,head,eyel,eyer,blood,vertaa,vertab,vertac,vertad,vertae,body,arml,frarml,armr,frarmr,staff,glow,spherea,sparka,sphereb,sparkb,spherec,sparkc,sphered,sparkd,spheree,sparke,spheref,sparkf,nrgy,ulegl,shinl,footl,ulegr,shinr,footr;

static-var buildheading,bMoving,bAiming,bCanAim,staffer,nrgychk,sparkchka,sparkchkb,sparkchkc,sparkchkd,sparkchke,sparkchkf;

#define SIG_MOVEMENT	2
#define SIG_NUM1	4
#define ARMORED		8
#define ANIM_VARIABLE TRUE


#include "StateChg.h"
#INCLUDE "hitweap.h"
#include "exptype.h"

Create()
	{
	hide blood;
	hide staff;
	hide glow;
	hide spherea;
	hide sphereb;
	hide spherec;
	hide sphered;
	hide spheree;
	hide spheref;
	hide sparka;
	hide sparkb;
	hide sparkc;
	hide sparkd;
	hide sparke;
	hide sparkf;
	hide nrgy;
	turn hips to x-axis <4> now;
	turn body to x-axis <-3> now;
	turn arml to x-axis <-2> now;
	turn frarml to x-axis <-20> now;
	turn armr to x-axis <-2> now;
	turn frarmr to x-axis <-20> now;
	cache eyel;
	cache eyer;
	cache vertaa;
	cache vertab;
	cache vertac;
	cache vertad;
	cache vertae;
	dont-cache eyel;
	dont-cache eyer;
	dont-cache blood;
	dont-cache glow;
	dont-shade eyel;
	dont-shade eyer;
	dont-shade blood;
	dont-shade nrgy;
	staffer = 1;
	sparkchka = 1;
	sparkchkb = 1;
	sparkchkc = 1;
	sparkchkd = 1;
	sparkchke = 1;
	sparkchkf = 1;
	nrgychk = 1;
	bMoving = FALSE;
	bAiming = FALSE;
	CALL-SCRIPT InitState();
	start-script MotionControl();
	}

walk()
	{
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.45> NOW;
			TURN ulegr to x-axis <24.0> NOW;
			TURN ulegl to x-axis <-53.0> NOW;
			TURN body to y-axis <12.0> NOW;
			TURN head to y-axis <-2.5> NOW;
			TURN hips to y-axis <-3.0> NOW;
			TURN shinl to x-axis <57.0> NOW;
			TURN shinr to x-axis <53.0> NOW;
			TURN footr to x-axis <-42.0> NOW;
			SLEEP <90>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.30> NOW;
			TURN ulegr to x-axis <-5.0> NOW;
			TURN ulegl to x-axis <-42.0> NOW;
			TURN body to y-axis <6.0> NOW;
			TURN head to y-axis <-1.3> NOW;
			TURN hips to y-axis <-2.0> NOW;
			TURN arml to x-axis <-18.0> speed <180>;
			TURN armr to x-axis <31.0> speed <180>;
			TURN frarmr to x-axis <-98.0> speed <170>;
			TURN frarml to x-axis <-49.0> speed <170>;
			TURN footl to x-axis <-12.0> NOW;
			TURN shinr to x-axis <82.0> NOW;
			TURN footr to x-axis <-30.0> NOW;
			SLEEP <70>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.15> NOW;
			TURN ulegr to x-axis <-13.0> NOW;
			TURN ulegl to x-axis <-25.0> NOW;
			TURN body to y-axis <0> NOW;
			TURN head to y-axis <0> NOW;
			TURN hips to y-axis <0> NOW;
			TURN shinl to x-axis <37.0> NOW;
			TURN footl to x-axis <-16.0> NOW;
			TURN shinr to x-axis <86.0> NOW;
			TURN footr to x-axis <-20.0> NOW;
			SLEEP <50>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <0> NOW;
			TURN ulegr to x-axis <-42.0> NOW;
			TURN ulegl to x-axis <5.0> NOW;
			TURN body to y-axis <-6.0> NOW;
			TURN head to y-axis <1.3> NOW;
			TURN hips to y-axis <2.0> NOW;
			TURN shinl to x-axis <7.0> NOW;
			TURN footl to x-axis <-21.0> NOW;
			TURN shinr to x-axis <105.0> NOW;
			TURN footr to x-axis <-10.0> NOW;
			SLEEP <40>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.15> NOW;
			TURN ulegr to x-axis <-57.0> NOW;
			TURN ulegl to x-axis <15.0> NOW;
			TURN body to y-axis <-12.0> NOW;
			TURN head to y-axis <2.5> NOW;
			TURN hips to y-axis <3.0> NOW;
			TURN footl to x-axis <-27.0> NOW;
			TURN shinr to x-axis <107.0> NOW;
			TURN footr to x-axis <0> NOW;
			SLEEP <50>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.30> NOW;
			TURN ulegr to x-axis <-67.0> NOW;
			TURN ulegl to x-axis <20.0> NOW;
			TURN body to y-axis <-18.0> NOW;
			TURN head to y-axis <3.8> NOW;
			TURN hips to y-axis <4.0> NOW;
			TURN shinl to x-axis <25.0> NOW;
			TURN footl to x-axis <-34.0> NOW;
			TURN shinr to x-axis <65.0> NOW;
			SLEEP <70>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.45> NOW;
			TURN ulegr to x-axis <-53.0> NOW;
			TURN ulegl to x-axis <24.0> NOW;
			TURN body to y-axis <-12.0> NOW;
			TURN head to y-axis <2.5> NOW;
			TURN hips to y-axis <3.0> NOW;
			TURN shinl to x-axis <53.0> NOW;
			TURN footl to x-axis <-42.0> NOW;
			TURN shinr to x-axis <57.0> NOW;
			SLEEP <90>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.30> NOW;
			TURN ulegr to x-axis <-42.0> NOW;
			TURN ulegl to x-axis <5.0> NOW;
			TURN body to y-axis <-6.0> NOW;
			TURN head to y-axis <1.3> NOW;
			TURN hips to y-axis <2.0> NOW;
			TURN arml to x-axis <31.0> speed <180>;
			TURN armr to x-axis <-18.0> speed <180>;
			TURN frarml to x-axis <-98.0> speed <170>;
			TURN frarmr to x-axis <-49.0>  speed <170>;
			TURN shinl to x-axis <82.0> NOW;
			TURN footl to x-axis <-30.0> NOW;
			TURN footr to x-axis <-12.0> NOW;
			SLEEP <70>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.15> NOW;
			TURN ulegr to x-axis <-25.0> NOW;
			TURN ulegl to x-axis <-13.0> NOW;
			TURN body to y-axis <0> NOW;
			TURN head to y-axis <0> NOW;
			TURN hips to y-axis <0> NOW;
			TURN shinl to x-axis <86.0> NOW;
			TURN footl to x-axis <-20.0> NOW;
			TURN shinr to x-axis <37.0> NOW;
			TURN footr to x-axis <-16.0> NOW;
			SLEEP <50>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <0> NOW;
			TURN ulegr to x-axis <5.0> NOW;
			TURN ulegl to x-axis <-42.0> NOW;
			TURN body to y-axis <6.0> NOW;
			TURN head to y-axis <-1.3> NOW;
			TURN hips to y-axis <-2.0> NOW;
			TURN shinl to x-axis <105.0> NOW;
			TURN footl to x-axis <-10.0> NOW;
			TURN shinr to x-axis <7.0> NOW;
			TURN footr to x-axis <-21.0> NOW;
			SLEEP <40>;
			}
		IF ( TRUE )
			{
 			MOVE hips to y-axis <-.15> NOW;
			TURN ulegr to x-axis <15.0> NOW;
			TURN ulegl to x-axis <-57.0> NOW;
			TURN body to y-axis <12.0> NOW;
			TURN head to y-axis <-2.5> NOW;
			TURN hips to y-axis <-3.0> NOW;
			TURN shinl to x-axis <107.0> NOW;
			TURN footl to x-axis <0> NOW;
			TURN footr to x-axis <-27.0> NOW;
			SLEEP <50>;
			}
		MOVE hips to y-axis <-.30> NOW;
		TURN ulegr to x-axis <20.0> NOW;
		TURN ulegl to x-axis <-67.0> NOW;
		TURN body to y-axis <18.0> NOW;
		TURN head to y-axis <-3.75> NOW;
		TURN hips to y-axis <-3.8> NOW;
		TURN shinl to x-axis <65.0> NOW;
		TURN shinr to x-axis <25.0> NOW;
		TURN footr to x-axis <-34.0> NOW;
		SLEEP <70>;
	}

walklegs()
	{
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.45> NOW;
			TURN ulegr to x-axis <24.0> NOW;
			TURN ulegl to x-axis <-53.0> NOW;
			TURN shinl to x-axis <57.0> NOW;
			TURN shinr to x-axis <53.0> NOW;
			TURN footr to x-axis <-42.0> NOW;
			SLEEP <90>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.30> NOW;
			TURN ulegr to x-axis <-5.0> NOW;
			TURN ulegl to x-axis <-42.0> NOW;
			TURN footl to x-axis <-12.0> NOW;
			TURN shinr to x-axis <82.0> NOW;
			TURN footr to x-axis <-30.0> NOW;
			SLEEP <70>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.15> NOW;
			TURN ulegr to x-axis <-13.0> NOW;
			TURN ulegl to x-axis <-25.0> NOW;
			TURN hips to y-axis <0> NOW;
			TURN shinl to x-axis <37.0> NOW;
			TURN footl to x-axis <-16.0> NOW;
			TURN shinr to x-axis <86.0> NOW;
			TURN footr to x-axis <-20.0> NOW;
			SLEEP <50>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <0> NOW;
			TURN ulegr to x-axis <-42.0> NOW;
			TURN ulegl to x-axis <5.0> NOW;
			TURN shinl to x-axis <7.0> NOW;
			TURN footl to x-axis <-21.0> NOW;
			TURN shinr to x-axis <105.0> NOW;
			TURN footr to x-axis <-10.0> NOW;
			SLEEP <40>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.15> NOW;
			TURN ulegr to x-axis <-57.0> NOW;
			TURN ulegl to x-axis <15.0> NOW;
			TURN footl to x-axis <-27.0> NOW;
			TURN shinr to x-axis <107.0> NOW;
			TURN footr to x-axis <0> NOW;
			SLEEP <50>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.30> NOW;
			TURN ulegr to x-axis <-67.0> NOW;
			TURN ulegl to x-axis <20.0> NOW;
			TURN shinl to x-axis <25.0> NOW;
			TURN footl to x-axis <-34.0> NOW;
			TURN shinr to x-axis <65.0> NOW;
			SLEEP <70>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.45> NOW;
			TURN ulegr to x-axis <-53.0> NOW;
			TURN ulegl to x-axis <24.0> NOW;
			TURN shinl to x-axis <53.0> NOW;
			TURN footl to x-axis <-42.0> NOW;
			TURN shinr to x-axis <57.0> NOW;
			SLEEP <90>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.30> NOW;
			TURN ulegr to x-axis <-42.0> NOW;
			TURN ulegl to x-axis <5.0> NOW;
			TURN shinl to x-axis <82.0> NOW;
			TURN footl to x-axis <-30.0> NOW;
			TURN footr to x-axis <-12.0> NOW;
			SLEEP <70>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.15> NOW;
			TURN ulegr to x-axis <-25.0> NOW;
			TURN ulegl to x-axis <-13.0> NOW;
			TURN hips to y-axis <0> NOW;
			TURN shinl to x-axis <86.0> NOW;
			TURN footl to x-axis <-20.0> NOW;
			TURN shinr to x-axis <37.0> NOW;
			TURN footr to x-axis <-16.0> NOW;
			SLEEP <50>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <0> NOW;
			TURN ulegr to x-axis <5.0> NOW;
			TURN ulegl to x-axis <-42.0> NOW;
			TURN shinl to x-axis <105.0> NOW;
			TURN footl to x-axis <-10.0> NOW;
			TURN shinr to x-axis <7.0> NOW;
			TURN footr to x-axis <-21.0> NOW;
			SLEEP <40>;
			}
		IF ( TRUE )
			{
 			MOVE hips to y-axis <-.15> NOW;
			TURN ulegr to x-axis <15.0> NOW;
			TURN ulegl to x-axis <-57.0> NOW;
			TURN shinl to x-axis <107.0> NOW;
			TURN footl to x-axis <0> NOW;
			TURN footr to x-axis <-27.0> NOW;
			SLEEP <50>;
			}
		MOVE hips to y-axis <-.30> NOW;
		TURN ulegr to x-axis <20.0> NOW;
		TURN ulegl to x-axis <-67.0> NOW;
		TURN shinl to x-axis <65.0> NOW;
		TURN shinr to x-axis <25.0> NOW;
		TURN footr to x-axis <-34.0> NOW;
		SLEEP <70>;
	}

stand()
	{
		MOVE hips to y-axis <0.0> SPEED <1.00>;
		TURN hips to y-axis <0> SPEED <65.0>;
		TURN ulegr to x-axis <0> SPEED <200.0>;
		TURN shinr to x-axis <0> SPEED <200.0>;
		TURN footr to x-axis <0> SPEED <200.0>;
		TURN ulegl to x-axis <0> SPEED <200.0>;
		TURN shinl to x-axis <0> SPEED <200.0>;
		TURN footl to x-axis <0> SPEED <200.0>;
		}
		SLEEP <23>;
	}

MotionControl(moving,aiming)
	{
	WHILE ( TRUE )
		{
		moving = bMoving ;
		aiming = bAiming ;
		IF (moving )
			{
			IF (aiming )
				{
				bCanAim = TRUE;
				CALL-SCRIPT walklegs();
				}
			IF (!aiming )
				{
				bCanAim = FALSE;
				CALL-SCRIPT walk();
				}
			}
		IF (!moving )
			{
			bCanAim = TRUE;
			CALL-SCRIPT stand();
			}
		}
	}

Go()
	{
	turn armr to x-axis <-75> speed <45>;
	turn staff to x-axis <10> speed <45>;
	move staff to z-axis <5> speed <45>;
	wait-for-turn armr around x-axis;
	wait-for-turn staff around x-axis;
	wait-for-move staff to z-axis;
	sleep 1200;
	explode glow type	SHATTER|;
	show glow;
	explode glow type	BITMAPONLY | BITMAP2;
	nrgychk = 0;
	set ARMORED to TRUE;
		show sparka;
		show sparkd;
		explode blood type	SHATTER|;
		show blood;
		show sparkb;
		show sparke;
		explode footl type	BITMAPONLY | BITMAP4;
		show sparkc;
		show sparkf;
		explode footr type	BITMAPONLY | BITMAP2;
		explode body type BITMAPONLY | BITMAP1;
		explode blood type	SHATTER|;
		show nrgy;
		hide hips;
		hide head;
		hide eyel;
		hide eyer;
		hide blood;
		hide vertaa;
		hide vertab;
		hide vertac;
		hide vertad;
		hide vertae;
		hide body;
		hide arml;
		hide frarml;
		hide armr;
		hide frarmr;
		hide staff;
		hide glow;
		hide ulegl;
		hide shinl;
		hide footl;
		hide ulegr;
		hide shinr;
		hide footr;
	SPIN spherea around z-axis speed <300>;
	SPIN sphereb around x-axis speed <300>;
	SPIN spherec around y-axis speed <300>;
	SPIN sphered around z-axis speed <-300>;
	SPIN spherea around x-axis speed <200>;
	SPIN sphereb around y-axis speed <-200>;
	SPIN spherec around z-axis speed <200>;
	SPIN spheree around x-axis speed <-300>;
	SPIN spheref around y-axis speed <-300>;
	SPIN sphered around y-axis speed <200>;
	SPIN spheree around z-axis speed <200>;
	SPIN spheref around x-axis speed <200>;
	SPIN nrgy around x-axis speed <500>;
	SPIN nrgy around y-axis speed <400>;
	turn body to y-axis 0 speed <75>;
	turn head to y-axis 0 speed <100>;
	}

Stop()
	{
	turn head to y-axis <0> speed <100>;
	turn body to y-axis <0> speed <100>;
	wait-for-turn body around y-axis;
	nrgychk = 1;
	set ARMORED to FALSE;
	explode sparka type BITMAPONLY | BITMAP1;
	explode sparkb type BITMAPONLY | BITMAP2;
	explode sparkc type BITMAPONLY | BITMAP3;
	show head;
	show eyel;
	show eyer;
	show blood;
	show body;
	show arml;
	show frarml;
	turn armr to x-axis <-2> now;
	turn staff to x-axis <-2> speed NOW;
	move staff to z-axis <0> now;
	show armr;
	show sparka;
	show sparkb;
	show sparkc;
	show sparkd;
	show sparke;
	show sparkf;
	explode sparka type BITMAPONLY | BITMAP3;
	explode sparkb type BITMAPONLY | BITMAP2;
	hide nrgy;
	explode sparkc type BITMAPONLY | BITMAP1;
	hide sparka;
	hide sparkb;
	hide sparkc;
	hide sparkd;
	hide sparke;
	hide sparkf;
	show hips;
	show vertaa;
	show vertab;
	show vertac;
	show vertad;
	show vertae;
	show frarmr;
	show staff;
	show glow;
	show ulegl;
	show shinl;
	show footl;
	show ulegr;
	show shinr;
	show footr;
	}

#DEFINE ACTIVATECMD CALL-SCRIPT Go();
#DEFINE DEACTIVATECMD CALL-SCRIPT Stop();
#INCLUDE "StateChg.h"

Activate()
	{
	START-SCRIPT RequestState( ACTIVE );
	SIGNAL SIG_NUM1;
	SET-SIGNAL-MASK SIG_NUM1;
	}

Deactivate()
	{
	START-SCRIPT RequestState( INACTIVE );
	SIGNAL SIG_NUM1;
	}


StartMoving()
	{
	bMoving = TRUE;
		{
		if (staffer == 0)
			{
			sleep1;
			}
		if (staffer == 1)
			{
			show staff;
			show glow;
			staffer = 0;
			}		
		}
	}

StopMoving()
	{
	bMoving = FALSE;
	}

SweetSpot(piecenum)
	{
	piecenum=body;
	}

Killed( severity, corpsetype )
	{
	show blood;
	show staff;
		if (severity <= 25)
		{
		corpsetype = 1;
		explode hips type	BITMAPONLY | BITMAP1;
		explode head type	BITMAPONLY | BITMAP2;
		explode eyel type	BITMAPONLY | BITMAP3;
		explode eyer type	BITMAPONLY | BITMAP4;
		explode blood type	SHATTER | BITMAP5;
		explode body type	BITMAPONLY | BITMAP1;
		explode arml type	BITMAPONLY | BITMAP2;
		explode frarml type	BITMAPONLY | BITMAP3;
		explode armr type	BITMAPONLY | BITMAP4;
		explode frarmr type	BITMAPONLY | BITMAP5;
		explode staff type	FALL | BITMAP1;
		explode ulegl type	BITMAPONLY | BITMAP2;
		explode shinl type	BITMAPONLY | BITMAP3;
		explode footl type	BITMAPONLY | BITMAP4;
		explode ulegr type	BITMAPONLY | BITMAP5;
		explode shinr type	BITMAPONLY | BITMAP1;
		explode footr type	BITMAPONLY | BITMAP2;
		return( 0 );
		}

	if (severity <= 50)
		{
		corpsetype = 2;
		explode hips type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode head type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode eyel type	SHATTER | BITMAP3;
		explode eyer type	SHATTER | BITMAP4;
		explode blood type	SHATTER | BITMAP5;
		explode body type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode arml type	FALL | BITMAP2;
		explode frarml type	FALL | BITMAP3;
		explode armr type	FALL | BITMAP4;
		explode frarmr type	FALL | BITMAP5;
		explode staff type	FALL | BITMAP1;
		explode ulegl type	FALL | BITMAP2;
		explode shinl type	FALL | BITMAP3;
		explode footl type	FALL | BITMAP4;
		explode ulegr type	FALL | BITMAP5;
		explode shinr type	FALL | BITMAP1;
		explode footr type	FALL | BITMAP2;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;
		explode hips type	SHATTER | BITMAP1;
		explode head type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode eyel type	SHATTER | BITMAP3;
		explode eyer type	SHATTER | BITMAP4;
		explode blood type	SHATTER | BITMAP5;
		explode body type	SHATTER | BITMAP1;
		explode arml type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode frarml type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode armr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode frarmr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode staff type	FALL | BITMAP1;
		explode ulegl type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode shinl type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode footl type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode ulegr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode shinr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode footr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return( 0 );
		}

		// If severity is over 50, the unit just disintigrated.
		corpsetype = 3;
		explode hips type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode head type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode eyel type	SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode eyer type	SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode blood type	SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode body type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode arml type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode frarml type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode armr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode frarmr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode staff type	FALL | BITMAP1;
		explode ulegl type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode shinl type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode footl type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode ulegr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode shinr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode footr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	}
