// Core Reclamation Alien -cLONe- Script by Ninjato of sWs "skunkWorks"

piece	base,hips,head,eyel,eyer,blood,body,arml,frarml,nanl,beaml,armr,frarmr,nanr,beamr,pak,ulegl,shinl,footl,ulegr,shinr,footr;

static-var buildheading,bMoving,bAiming,bCanAim,beam;

#define SMOKEPIECE1 pak
#define ANIM_VARIABLE TRUE

#include "StateChg.h"
#include "hitweap.h"
#include "smokeunit.h"
#include "exptype.h"

walk()
	{
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.45> NOW;
			TURN ulegr to x-axis <24.0> NOW;
			TURN ulegl to x-axis <-53.0> NOW;
			TURN body to y-axis <12.0> NOW;
			TURN head to y-axis <-2.5> NOW;
			TURN hips to y-axis <-3.0> NOW;
			TURN shinl to x-axis <57.0> NOW;
			TURN shinr to x-axis <53.0> NOW;
			TURN footr to x-axis <-42.0> NOW;
			SLEEP <90>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.30> NOW;
			TURN ulegr to x-axis <-5.0> NOW;
			TURN ulegl to x-axis <-42.0> NOW;
			TURN body to y-axis <6.0> NOW;
			TURN head to y-axis <-1.3> NOW;
			TURN hips to y-axis <-2.0> NOW;
			TURN arml to x-axis <-18.0> speed <180>;
			TURN armr to x-axis <31.0> speed <180>;
			TURN frarmr to x-axis <-98.0> speed <170>;
			TURN frarml to x-axis <-49.0> speed <170>;
			TURN footl to x-axis <-12.0> NOW;
			TURN shinr to x-axis <82.0> NOW;
			TURN footr to x-axis <-30.0> NOW;
			SLEEP <70>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.15> NOW;
			TURN ulegr to x-axis <-13.0> NOW;
			TURN ulegl to x-axis <-25.0> NOW;
			TURN body to y-axis <0> NOW;
			TURN head to y-axis <0> NOW;
			TURN hips to y-axis <0> NOW;
			TURN shinl to x-axis <37.0> NOW;
			TURN footl to x-axis <-16.0> NOW;
			TURN shinr to x-axis <86.0> NOW;
			TURN footr to x-axis <-20.0> NOW;
			SLEEP <50>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <0> NOW;
			TURN ulegr to x-axis <-42.0> NOW;
			TURN ulegl to x-axis <5.0> NOW;
			TURN body to y-axis <-6.0> NOW;
			TURN head to y-axis <1.3> NOW;
			TURN hips to y-axis <2.0> NOW;
			TURN shinl to x-axis <7.0> NOW;
			TURN footl to x-axis <-21.0> NOW;
			TURN shinr to x-axis <105.0> NOW;
			TURN footr to x-axis <-10.0> NOW;
			SLEEP <40>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.15> NOW;
			TURN ulegr to x-axis <-57.0> NOW;
			TURN ulegl to x-axis <15.0> NOW;
			TURN body to y-axis <-12.0> NOW;
			TURN head to y-axis <2.5> NOW;
			TURN hips to y-axis <3.0> NOW;
			TURN footl to x-axis <-27.0> NOW;
			TURN shinr to x-axis <107.0> NOW;
			TURN footr to x-axis <0> NOW;
			SLEEP <50>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.30> NOW;
			TURN ulegr to x-axis <-67.0> NOW;
			TURN ulegl to x-axis <20.0> NOW;
			TURN body to y-axis <-18.0> NOW;
			TURN head to y-axis <3.8> NOW;
			TURN hips to y-axis <4.0> NOW;
			TURN shinl to x-axis <25.0> NOW;
			TURN footl to x-axis <-34.0> NOW;
			TURN shinr to x-axis <65.0> NOW;
			SLEEP <70>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.45> NOW;
			TURN ulegr to x-axis <-53.0> NOW;
			TURN ulegl to x-axis <24.0> NOW;
			TURN body to y-axis <-12.0> NOW;
			TURN head to y-axis <2.5> NOW;
			TURN hips to y-axis <3.0> NOW;
			TURN shinl to x-axis <53.0> NOW;
			TURN footl to x-axis <-42.0> NOW;
			TURN shinr to x-axis <57.0> NOW;
			SLEEP <90>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.30> NOW;
			TURN ulegr to x-axis <-42.0> NOW;
			TURN ulegl to x-axis <5.0> NOW;
			TURN body to y-axis <-6.0> NOW;
			TURN head to y-axis <1.3> NOW;
			TURN hips to y-axis <2.0> NOW;
			TURN arml to x-axis <31.0> speed <180>;
			TURN armr to x-axis <-18.0> speed <180>;
			TURN frarml to x-axis <-98.0> speed <170>;
			TURN frarmr to x-axis <-49.0>  speed <170>;
			TURN shinl to x-axis <82.0> NOW;
			TURN footl to x-axis <-30.0> NOW;
			TURN footr to x-axis <-12.0> NOW;
			SLEEP <70>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.15> NOW;
			TURN ulegr to x-axis <-25.0> NOW;
			TURN ulegl to x-axis <-13.0> NOW;
			TURN body to y-axis <0> NOW;
			TURN head to y-axis <0> NOW;
			TURN hips to y-axis <0> NOW;
			TURN shinl to x-axis <86.0> NOW;
			TURN footl to x-axis <-20.0> NOW;
			TURN shinr to x-axis <37.0> NOW;
			TURN footr to x-axis <-16.0> NOW;
			SLEEP <50>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <0> NOW;
			TURN ulegr to x-axis <5.0> NOW;
			TURN ulegl to x-axis <-42.0> NOW;
			TURN body to y-axis <6.0> NOW;
			TURN head to y-axis <-1.3> NOW;
			TURN hips to y-axis <-2.0> NOW;
			TURN shinl to x-axis <105.0> NOW;
			TURN footl to x-axis <-10.0> NOW;
			TURN shinr to x-axis <7.0> NOW;
			TURN footr to x-axis <-21.0> NOW;
			SLEEP <40>;
			}
		IF ( TRUE )
			{
 			MOVE hips to y-axis <-.15> NOW;
			TURN ulegr to x-axis <15.0> NOW;
			TURN ulegl to x-axis <-57.0> NOW;
			TURN body to y-axis <12.0> NOW;
			TURN head to y-axis <-2.5> NOW;
			TURN hips to y-axis <-3.0> NOW;
			TURN shinl to x-axis <107.0> NOW;
			TURN footl to x-axis <0> NOW;
			TURN footr to x-axis <-27.0> NOW;
			SLEEP <50>;
			}
		MOVE hips to y-axis <-.30> NOW;
		TURN ulegr to x-axis <20.0> NOW;
		TURN ulegl to x-axis <-67.0> NOW;
		TURN body to y-axis <18.0> NOW;
		TURN head to y-axis <-3.75> NOW;
		TURN hips to y-axis <-3.8> NOW;
		TURN shinl to x-axis <65.0> NOW;
		TURN shinr to x-axis <25.0> NOW;
		TURN footr to x-axis <-34.0> NOW;
		SLEEP <70>;
	}

walklegs()
	{
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.45> NOW;
			TURN ulegr to x-axis <24.0> NOW;
			TURN ulegl to x-axis <-53.0> NOW;
			TURN shinl to x-axis <57.0> NOW;
			TURN shinr to x-axis <53.0> NOW;
			TURN footr to x-axis <-42.0> NOW;
			SLEEP <90>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.30> NOW;
			TURN ulegr to x-axis <-5.0> NOW;
			TURN ulegl to x-axis <-42.0> NOW;
			TURN footl to x-axis <-12.0> NOW;
			TURN shinr to x-axis <82.0> NOW;
			TURN footr to x-axis <-30.0> NOW;
			SLEEP <70>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.15> NOW;
			TURN ulegr to x-axis <-13.0> NOW;
			TURN ulegl to x-axis <-25.0> NOW;
			TURN hips to y-axis <0> NOW;
			TURN shinl to x-axis <37.0> NOW;
			TURN footl to x-axis <-16.0> NOW;
			TURN shinr to x-axis <86.0> NOW;
			TURN footr to x-axis <-20.0> NOW;
			SLEEP <50>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <0> NOW;
			TURN ulegr to x-axis <-42.0> NOW;
			TURN ulegl to x-axis <5.0> NOW;
			TURN shinl to x-axis <7.0> NOW;
			TURN footl to x-axis <-21.0> NOW;
			TURN shinr to x-axis <105.0> NOW;
			TURN footr to x-axis <-10.0> NOW;
			SLEEP <40>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.15> NOW;
			TURN ulegr to x-axis <-57.0> NOW;
			TURN ulegl to x-axis <15.0> NOW;
			TURN footl to x-axis <-27.0> NOW;
			TURN shinr to x-axis <107.0> NOW;
			TURN footr to x-axis <0> NOW;
			SLEEP <50>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.30> NOW;
			TURN ulegr to x-axis <-67.0> NOW;
			TURN ulegl to x-axis <20.0> NOW;
			TURN shinl to x-axis <25.0> NOW;
			TURN footl to x-axis <-34.0> NOW;
			TURN shinr to x-axis <65.0> NOW;
			SLEEP <70>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.45> NOW;
			TURN ulegr to x-axis <-53.0> NOW;
			TURN ulegl to x-axis <24.0> NOW;
			TURN shinl to x-axis <53.0> NOW;
			TURN footl to x-axis <-42.0> NOW;
			TURN shinr to x-axis <57.0> NOW;
			SLEEP <90>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.30> NOW;
			TURN ulegr to x-axis <-42.0> NOW;
			TURN ulegl to x-axis <5.0> NOW;
			TURN shinl to x-axis <82.0> NOW;
			TURN footl to x-axis <-30.0> NOW;
			TURN footr to x-axis <-12.0> NOW;
			SLEEP <70>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <-.15> NOW;
			TURN ulegr to x-axis <-25.0> NOW;
			TURN ulegl to x-axis <-13.0> NOW;
			TURN hips to y-axis <0> NOW;
			TURN shinl to x-axis <86.0> NOW;
			TURN footl to x-axis <-20.0> NOW;
			TURN shinr to x-axis <37.0> NOW;
			TURN footr to x-axis <-16.0> NOW;
			SLEEP <50>;
			}
		IF ( TRUE )
			{
			MOVE hips to y-axis <0> NOW;
			TURN ulegr to x-axis <5.0> NOW;
			TURN ulegl to x-axis <-42.0> NOW;
			TURN shinl to x-axis <105.0> NOW;
			TURN footl to x-axis <-10.0> NOW;
			TURN shinr to x-axis <7.0> NOW;
			TURN footr to x-axis <-21.0> NOW;
			SLEEP <40>;
			}
		IF ( TRUE )
			{
 			MOVE hips to y-axis <-.15> NOW;
			TURN ulegr to x-axis <15.0> NOW;
			TURN ulegl to x-axis <-57.0> NOW;
			TURN shinl to x-axis <107.0> NOW;
			TURN footl to x-axis <0> NOW;
			TURN footr to x-axis <-27.0> NOW;
			SLEEP <50>;
			}
		MOVE hips to y-axis <-.30> NOW;
		TURN ulegr to x-axis <20.0> NOW;
		TURN ulegl to x-axis <-67.0> NOW;
		TURN shinl to x-axis <65.0> NOW;
		TURN shinr to x-axis <25.0> NOW;
		TURN footr to x-axis <-34.0> NOW;
		SLEEP <70>;
	}

stand()
	{
		MOVE hips to y-axis <0> SPEED <1.00>;
		TURN hips to y-axis <0> SPEED <65.0>;
		TURN ulegr to x-axis <0> SPEED <200.0>;
		TURN shinr to x-axis <0> SPEED <200.0>;
		TURN footr to x-axis <0> SPEED <200.0>;
		TURN ulegl to x-axis <0> SPEED <200.0>;
		TURN shinl to x-axis <0> SPEED <200.0>;
		TURN footl to x-axis <0> SPEED <200.0>;
		SLEEP <23>;
	}

open()
	{
		IF ( TRUE )
			{
		turn beaml to x-axis <0> SPEED NOW;
		turn beamr to x-axis <0> SPEED NOW;
			}
		SLEEP <500>;
	}

close()
	{
		IF ( TRUE )
			{
		TURN armr to x-axis <-2> SPEED <60>;
		TURN arml to x-axis <-2> SPEED <60>;
		TURN frarmr to x-axis <-20> SPEED <75.0>;
		TURN frarml to x-axis <-20> SPEED <75.0>;
			}
		SLEEP <500>;
	}

MotionControl(moving,aiming)
	{
		WHILE ( TRUE )
			{
			moving = bMoving ;
			aiming = bAiming ;
			IF (moving )
				{
				IF (aiming )
					{
					bCanAim = TRUE;
					CALL-SCRIPT walklegs();
					}
				IF (!aiming )
					{
					bCanAim = FALSE;
					CALL-SCRIPT walk();
					}
				}
			IF (!moving )
				{
				bCanAim = TRUE;
				CALL-SCRIPT stand();
				}
			}
	}

Go()
	{
	bAiming = TRUE;
	dont-cache eyel;
	dont-cache eyer;
	dont-cache beaml;
	dont-cache beamr;
	dont-cache pak;
	CALL-SCRIPT open();
	turn head to y-axis buildheading speed <200>;
	turn body to y-axis buildheading speed <100>;
	turn arml to x-axis <-2> SPEED <120>;
	turn frarml to x-axis <-90> speed <150>;
	turn armr to x-axis <-2> SPEED <120>;
	turn frarmr to x-axis <-90> speed <150>;
	wait-for-turn body around y-axis;
	wait-for-turn arml around x-axis;
	wait-for-turn frarml around x-axis;
	wait-for-turn armr around x-axis;
	wait-for-turn frarmr around x-axis;
	set INBUILDSTANCE to TRUE;
	}

Stop()
	{
	set INBUILDSTANCE to FALSE;
	cache eyel;
	cache eyer;
	cache beaml;
	cache beamr;
	cache pak;
	turn head to y-axis <0> speed <100>;
	turn body to y-axis <0> speed <75>;
	wait-for-turn body around y-axis;
	CALL-SCRIPT close();
	bAiming = FALSE;
	}

#DEFINE ACTIVATECMD CALL-SCRIPT Go();
#DEFINE DEACTIVATECMD CALL-SCRIPT Stop();
#INCLUDE "StateChg.h"

Create()
	{
	hide blood;
	hide beaml;
	hide beamr;
	turn hips to x-axis <4> now;
	turn body to x-axis <-3> now;
	turn arml to x-axis <-2> now;
	turn armr to x-axis <-2> now;
	turn frarml to x-axis <-20> now;
	turn frarmr to x-axis <-20> now;
	turn beaml to x-axis <0> SPEED NOW;
	turn beamr to x-axis <0> SPEED NOW;
	cache beaml;
	cache beamr;
	cache eyel;
	cache eyer;
	cache pak;
	dont-cache blood;
	dont-cache beaml;
	dont-cache beamr;
	dont-shade eyel;
	dont-shade eyer;
	dont-shade blood;
	dont-shade beaml;
	dont-shade beamr;
	beam = 0;
	buildheading = 0;
	bMoving = FALSE;
	bAiming = FALSE;
	bCanAim = TRUE;
	CALL-SCRIPT InitState();
	start-script SmokeUnit();
	START-SCRIPT MotionControl();
	}

Activate()
	{
	START-SCRIPT RequestState( ACTIVE );
	}

Deactivate()
	{
	START-SCRIPT RequestState( INACTIVE );
	}

StartBuilding(heading)
	{
	buildheading = heading;
	START-SCRIPT RequestState( ACTIVE );
	}

StopBuilding()
	{
	START-SCRIPT RequestState( INACTIVE );
	}

StartMoving()
	{
	bMoving = TRUE;
	}

StopMoving()
	{
	bMoving = FALSE;
	}

SweetSpot(piecenum)
	{
	piecenum=body;
	}

QueryNanoPiece(piecenum)
	{
	if( beam == 0 )
		{
		piecenum=beaml;
		}
	if( beam != 0 )
		{
		piecenum=beamr;
		}
	beam = !beam;
	}

TargetHeading( heading )
	{
	buildheading = 0 - heading;
	}

Killed( severity, corpsetype )
	{
	hide beaml;
	hide beamr;
	show blood;
		if (severity <= 25)
		{
		corpsetype = 1;
		explode hips type	BITMAPONLY | BITMAP1;
		explode head type	BITMAPONLY | BITMAP2;
		explode eyel type	BITMAPONLY | BITMAP3;
		explode eyer type	BITMAPONLY | BITMAP4;
		explode blood type	SHATTER | BITMAP5;
		explode body type	BITMAPONLY | BITMAP1;
		explode arml type	BITMAPONLY | BITMAP2;
		explode frarml type	BITMAPONLY | BITMAP3;
		explode nanl type	BITMAPONLY | BITMAP4;
		explode beaml type	BITMAPONLY | BITMAP5;
		explode armr type	BITMAPONLY | BITMAP1;
		explode frarmr type	BITMAPONLY | BITMAP2;
		explode nanr type	BITMAPONLY | BITMAP3;
		explode beamr type	BITMAPONLY | BITMAP4;
		explode pak type	BITMAPONLY | BITMAP5;
		explode ulegl type	BITMAPONLY | BITMAP1;
		explode shinl type	BITMAPONLY | BITMAP2;
		explode footl type	BITMAPONLY | BITMAP3;
		explode ulegr type	BITMAPONLY | BITMAP4;
		explode shinr type	BITMAPONLY | BITMAP5;
		explode footr type	BITMAPONLY | BITMAP1;
		return( 0 );
		}

	if (severity <= 50)
		{
		corpsetype = 2;
		explode hips type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode head type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode eyel type	SHATTER | BITMAP3;
		explode eyer type	SHATTER | BITMAP4;
		explode blood type	SHATTER | BITMAP5;
		explode body type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode arml type	FALL | BITMAP2;
		explode frarml type	FALL | BITMAP3;
		explode nanl type	FALL | BITMAP4;
		explode beaml type	FALL | BITMAP5;
		explode armr type	FALL | BITMAP1;
		explode frarmr type	FALL | BITMAP2;
		explode nanr type	FALL | BITMAP3;
		explode beamr type	FALL | BITMAP4;
		explode pak type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode ulegl type	FALL | BITMAP1;
		explode shinl type	FALL | BITMAP2;
		explode footl type	FALL | BITMAP3;
		explode ulegr type	FALL | BITMAP4;
		explode shinr type	FALL | BITMAP5;
		explode footr type	FALL | BITMAP1;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;
		explode hips type	SHATTER | BITMAP1;
		explode head type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode eyel type	SHATTER | BITMAP3;
		explode eyer type	SHATTER | BITMAP4;
		explode blood type	SHATTER | BITMAP5;
		explode body type	SHATTER | BITMAP1;
		explode arml type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode frarml type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode nanl type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode beaml type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode armr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode frarmr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode nanr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode beamr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode pak type	SHATTER | BITMAP5;
		explode ulegl type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode shinl type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode footl type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode ulegr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode shinr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode footr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return( 0 );
		}

		corpsetype = 3;
		explode hips type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode head type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode eyel type	SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode eyer type	SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode blood type	SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode body type	SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode arml type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode frarml type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode nanl type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode beaml type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode armr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode frarmr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode nanr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode beamr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode pak type	SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode ulegl type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode shinl type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode footl type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode ulegr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode shinr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode footr type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	}
