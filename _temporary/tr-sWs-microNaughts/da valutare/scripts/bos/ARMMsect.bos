// Arm Insector -cLONe- Script by Ninjato of sWs "skunkWorks"

piece	base,floor,turreta,turretb,missile,aimpoint,leg1,leg2,leg3,leg4,door1,door2;

static-var bMoving,restore_delay,fire,bCanaim;

#define SIG_AIM		2
#define ANIM_VARIABLE TRUE
#define SMOKEPIECE1 base
#include "smokeunit.h"
#include "exptype.h"

walk()
	{
		IF ( TRUE )
			{
			TURN base to z-axis <5> SPEED <30>;
			TURN leg1 to z-axis <0> NOW;
			TURN leg1 to z-axis <-38> SPEED <131>;
			TURN leg2 to y-axis <35> NOW;
			TURN leg2 to y-axis <35> SPEED <0>;
			TURN leg2 to z-axis <38> NOW;
			TURN leg2 to z-axis <0> SPEED <131>;
			TURN leg3 to y-axis <-30> NOW;
			TURN leg3 to y-axis <30> SPEED <207>;
			TURN leg3 to z-axis <38> NOW;
			TURN leg4 to y-axis <-30> NOW;
			TURN leg4 to y-axis <30> SPEED <207>;
			TURN leg4 to z-axis <0> NOW;
			TURN leg4 to z-axis <0> SPEED <0>;
			SLEEP <292>;
			}
		IF ( TRUE )
			{
			TURN base to x-axis <-5> SPEED <30>;
			TURN leg1 to y-axis <-35> SPEED <189>;
			TURN leg1 to z-axis <-38> SPEED <0>;
			TURN leg2 to y-axis <-20> SPEED <189>;
			TURN leg2 to z-axis <0> SPEED <0>;
			TURN leg3 to z-axis <0> SPEED <129>;
			TURN leg4 to z-axis <-38> SPEED <131>;
			SLEEP <293>;
			}
		IF ( TRUE )
			{
			TURN base to z-axis <-5> SPEED <30>;
			TURN leg1 to y-axis <-35> SPEED <0>;
			TURN leg1 to z-axis <0> SPEED <131>;
			TURN leg2 to z-axis <38> SPEED <131>;
			TURN leg3 to y-axis <-30> SPEED <207>;
			TURN leg3 to z-axis <0> SPEED <0>;
			TURN leg4 to y-axis <-30> SPEED <207>;
			TURN leg4 to z-axis <-38> SPEED <0>;
			SLEEP <292>;
			}
			TURN base to x-axis <5> SPEED <30>;
			TURN leg1 to y-axis <20> SPEED <189>;
			TURN leg1 to z-axis <0> SPEED <0>;
			TURN leg2 to y-axis <35> SPEED <189>;
			TURN leg2 to z-axis <38> SPEED <0>;
			TURN leg3 to z-axis <38> SPEED <129>;
			TURN leg4 to y-axis <-30> SPEED <0>;
			TURN leg4 to z-axis <0> SPEED <131>;
			SLEEP <293>;
			}
	}

reload()
	{
	bCanAim = FALSE;
	TURN turretb to x-axis <0> speed <100>;
	TURN turreta to y-axis <0> speed <200>;
	wait-for-turn turretb around x-axis;
	wait-for-turn turreta around y-axis;
	MOVE floor to y-axis <0> speed <4>;
	MOVE turretb to y-axis <0> speed <4>;
	wait-for-move floor along y-axis;
	wait-for-move turretb along y-axis;
	TURN door1 to z-axis <0> speed <500>;
	TURN door2 to z-axis <0> speed <500>;
	wait-for-turn door1 around z-axis;
	wait-for-turn door2 around z-axis;
	show missile;
	bCanAim = TRUE;
		}
	SLEEP <500>;
	}

MotionControl()
	{
	var	moving;

	while (TRUE)
		{
		moving = bMoving;

		if (moving)
			{
			call-script walk();
			}
		if (NOT moving)
			{
			sleep 100;
			}
		}
	}

Create()
	{
	hide aimpoint;
	cache missile;
	dont-cache door1;
	dont-cache door2;
	dont-shade floor;
	dont-shade turreta;
	dont-shade turretb;
	dont-shade missile;
	dont-shade leg1;
	dont-shade leg2;
	dont-shade leg3;
	dont-shade leg4;
	dont-shade door1;
	dont-shade door2;
	fire = 0;
	bCanAim = TRUE;
	bMoving = FALSE;
	restore_delay = 2500;
	start-script MotionControl();
	start-script SmokeUnit();
	}

StartMoving()
	{
	bMoving = TRUE;
	}

StopMoving()
	{
	bMoving = FALSE;
	}

SweetSpot(piecenum)
	{
	piecenum=floor;
	}

RestoreAfterDelay()
	{
	sleep restore_delay;
	TURN turretb to x-axis <0> speed <100>;
	TURN turreta to y-axis <0> speed <200>;
	wait-for-turn turretb around x-axis;
	wait-for-turn turreta around y-axis;
	MOVE floor to y-axis <0> speed <4>;
	MOVE turretb to y-axis <0> speed <4>;
	wait-for-move floor along y-axis;
	wait-for-move turretb along y-axis;
	cache missile;
	TURN door1 to z-axis <0> speed <500>;
	TURN door2 to z-axis <0> speed <500>;
	wait-for-turn door1 around z-axis;
	wait-for-turn door2 around z-axis;
	show missile;
	bCanAim = TRUE;
	}

AimFromPrimary(piecenum)
	{
	piecenum=turretb;
	}

QueryPrimary(piecenum)
	{
	piecenum=aimpoint;
	}

FirePrimary()
	{
	hide missile;
	CALL-SCRIPT reload();
	}

AimPrimary(heading,pitch)
	{
	SIGNAL SIG_AIM;
	SET-SIGNAL-MASK SIG_AIM;
	while (NOT bCanAim)
		{
		sleep 500;
		}
	dont-cache missile;
	TURN door1 to z-axis <155> speed <500>;
	TURN door2 to z-axis <-155> speed <500>;
	wait-for-turn door1 around z-axis;
	wait-for-turn door2 around z-axis;
	MOVE floor to y-axis <1> speed <4>;
	MOVE turretb to y-axis <0.4> speed <4>;
	wait-for-move floor along y-axis;
	wait-for-move turretb along y-axis;
	TURN turreta to y-axis heading speed <200>;
	TURN turretb to x-axis (0 - pitch) speed <100>;
	wait-for-turn turreta around y-axis;
	wait-for-turn turretb around x-axis;
	start-script RestoreAfterDelay();
	return( TRUE );
	}

Killed( severity, corpsetype )
	{
	hide missile;
	hide aimpoint;
		if (severity <= 25)
		{
		corpsetype = 1;

		explode base type	BITMAPONLY | BITMAP1;
		explode floor type	BITMAPONLY | BITMAP2;
		explode turreta type	BITMAPONLY | BITMAP3;
		explode turretb type	BITMAPONLY | BITMAP4;
		explode missile type	BITMAPONLY | BITMAP5;
		explode aimpoint type	BITMAPONLY | BITMAP1;
		explode leg1 type	BITMAPONLY | BITMAP2;
		explode leg2 type	BITMAPONLY | BITMAP3;
		explode leg3 type	BITMAPONLY | BITMAP4;
		explode leg4 type	BITMAPONLY | BITMAP5;
		explode door1 type	BITMAPONLY | BITMAP1;
		explode door2 type	BITMAPONLY | BITMAP2;
		return( 0 );
		}

	if (severity <= 50)
		{
		corpsetype = 2;

		explode base type	FALL | BITMAP1;
		explode floor type	FALL | BITMAP2;
		explode turreta type	FALL | BITMAP3;
		explode turretb type	FALL | BITMAP4;
		explode missile type	FALL | BITMAP5;
		explode aimpoint type	FALL | BITMAP1;
		explode leg1 type	FALL | BITMAP2;
		explode leg2 type	FALL | BITMAP3;
		explode leg3 type	FALL | BITMAP4;
		explode leg4 type	FALL | BITMAP5;
		explode door1 type	FALL | BITMAP1;
		explode door2 type	FALL | BITMAP2;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;

		explode base type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode floor type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turreta type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turretb type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode missile type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode aimpoint type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leg1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leg2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leg3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg4 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode door1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return( 0 );
		}

		corpsetype = 3;

		explode base type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode floor type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turreta type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turretb type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode missile type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode aimpoint type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leg1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leg2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leg3 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg4 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode door1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	}
