// Core Dragon Script, by John Stewart (Rhadamanthus from TADD)

piece flare1,flare2,nrg_left,nrg_right,base;

static-var bArmed, bArming, bDisarming, bAloft, restore_delay, fire;

#define SMOKEPIECE1 base
#define ANIM_VARIABLE TRUE
#define SIG_AIM		2

#include "StateChg.h"
#include "smokeunit.h"
#include "exptype.h"

#define ACTIVATECMD call-script activatescr();
#define DEACTIVATECMD call-script deactivatescr();
#include "StateChg.h"

Activatescr()
	{
	set-signal-mask 0;
	move arm_left to x-axis <-4.25> now;
	move arm_right to x-axis <4.25> now;
	movenrg_left to y-axis <0> now;
	movenrg_right to y-axis <0> now;
	turn s1_left to x-axis <0> now;
	turn s2_left to x-axis <0> now;
	turn s1_right to x-axis <0> now;
	turn s2_right to x-axis <0> now;


	move arm_left along x-axis <0> speed 3;
	move arm_right along x-axis <0> speed 3;
	wait-for-move arm_left along x-axis;
	wait-for-move arm_right along x-axis;

	turn s1_left around x-axis <55> speed <30>;
	turn s2_left around x-axis <-55> speed <30>;
	turn s1_right around x-axis <55> speed <30>;
	turn s2_right around x-axis <-55> speed <30>;

	show nrg_left;
	dont-cache nrg_left;
	show nrg_right;
	dont-cache nrg_right;
	move nrg_left along y-axis <2> speed <2>;
	move nrg_right along y-axis <2> speed <2>;

	wait-for-turn s1_left around x-axis;
	wait-for-turn s2_left around x-axis;
	wait-for-turn s1_right around x-axis;
	wait-for-turn s2_right around x-axis;	

	wait-for-move nrg_left along y-axis;
	wait-for-move nrg_right along y-axis;

	bAloft = TRUE;
	}

Deactivatescr()
	{
	while (bArmed)
		{
		sleep(250); //can't retract thrusters while guns are drawn
		}

	set-signal-mask 0;
	move arm_left to x-axis <0> now;
	move arm_right to x-axis <0> now;
	movenrg_left to y-axis <2> now;
	movenrg_right to y-axis <2> now;
	turn s1_left to x-axis <55> now;
	turn s2_left to x-axis <-55> now;
	turn s1_right to x-axis <55> now;
	turn s2_right to x-axis <-55> now;

	turn s1_left around x-axis <0> speed <30>;
	turn s2_left around x-axis <0> speed <30>;
	turn s1_right around x-axis <0> speed <30>;
	turn s2_right around x-axis <0> speed <30>;

	move nrg_left along y-axis <0> speed <5>;	
	move nrg_right along y-axis <0> speed <5>;	
	wait-for-move nrg_left along y-axis;
	wait-for-move nrg_right along y-axis;
	wait-for-turn s1_left around x-axis;
	wait-for-turn s2_left around x-axis;
	wait-for-turn s1_right around x-axis;
	wait-for-turn s2_right around x-axis;

	hide nrg_left;
	cache nrg_left;
	hide nrg_right;
	cache nrg_right;

	move arm_left along x-axis <-4.25> speed 3;
	move arm_right along x-axis <4.25> speed 3;
	wait-for-move arm_left along x-axis;
	wait-for-move arm_right along x-axis;

	bAloft=FALSE;
	}

Arm()
	{
	bArming = TRUE;

	while (!bAloft)
		{
		sleep (250); //can't draw guns while landed
		}

	turn shoulder_left to z-axis <0> now;
	turn rack_left to y-axis <0> now;
	turn shoulder_right to z-axis <0> now;
	turn rack_right to y-axis <0> now;


	turn shoulder_left around z-axis <90> speed <45>;
	turn shoulder_right around z-axis <-90> speed <45>;
	wait-for-turn shoulder_left around z-axis;
	wait-for-turn shoulder_right around z-axis;

	turn rack_left around y-axis <-45> speed 30;
	turn rack_right around y-axis <45> speed 30;

	wait-for-turn rack_left around y-axis;
	wait-for-turn rack_right around y-axis;

	bArming = FALSE;
	bArmed = TRUE;
	}

Disarm()
	{
	bDisarming = TRUE;
	bArmed = FALSE;

	turn shoulder_left to z-axis <90> now;
	turn rack_left to y-axis <-45> now;
	turn shoulder_right to z-axis <-90> now;
	turn rack_right to y-axis <45> now;

	turn rack_left around y-axis <0> speed 30;
	turn rack_right around y-axis <0> speed 30;
	wait-for-turn rack_left around y-axis;
	wait-for-turn rack_right around y-axis;

	turn shoulder_left around z-axis <0> speed <45>;
	turn shoulder_right around z-axis <0> speed <45>;
	wait-for-turn shoulder_left around z-axis;
	wait-for-turn shoulder_right around z-axis;
	bDisarming = FALSE;
	}



Create()
	{
	hide nrg_left;
	hide nrg_right;
	cache nrg_left;
	cache nrg_right;
	hide flare1;
	hide flare2;

	show body;
	show shoulder_left;
	show rack_left;
	show muz_left;
	show shoulder_right;
	show rack_right;
	show muz_right;
	show boot_left;
	show arm_left;
	show thruster_left;
	show s1_left;
	show s2_left;
	show boot_right;
	show arm_right;
	show thruster_right;
	show s1_right;
	show s2_right;
	move arm_left to x-axis <-4.25> now;
	move arm_right to x-axis <4.25> now;
	
	bArmed = FALSE;
	bArming = FALSE;
	bDisarming = FALSE;
	bAloft = FALSE;
	restore_delay = 20000;
	fire = 0;

	call-script InitState();
	start-script SmokeUnit();
	}

SetMaxReloadTime(time)
	{
	restore_delay = 20000;
	}

Activate()
	{
	start-script RequestState( ACTIVE );
	}

Deactivate()
	{
	start-script RequestState( INACTIVE );
	}

QueryPrimary(piecenum)
	{
	piecenum = Flare2;
	}
QuerySecondary(piecenum)
	{
	piecenum = Flare1;
	}


SweetSpot(piecenum)
	{
	piecenum = base;
	}

AimPrimary()
	{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	while (bArming)
		{
		sleep(250)//in case it's already trying to arm
		}
	while (bDisarming)
		{
		sleep(250)
		}
	if (!bArmed)
		{
		set-signal-mask 0; //can't kill script while drawing weapons
		start-script Arm();
		while (!bArmed)
			{
			sleep(250);
			}
		set-signal-mask SIG_AIM;
		}
	
	start-script RestoreAfterDelay();
	return(TRUE);
	}
//AimSecondary()
//	{
//	while (!bArmed)
//		{
//		sleep(250);
//		}
//	return(TRUE);
//	}

//AimFromPrimary(piecenum)
//	{
//	piecenum = flare2;
//	}
//AimFromSecondary(piecenum)
//	{
//	piecenum = flare1;
//	}


RestoreAfterDelay()
	{
	// Wait for something to happen
	sleep restore_delay;

	// If we got this far without being killed, then nothing is
	// happening.  Restore the standard position

	set-signal-mask 0;	// We can't die during the holstering process

	// Holster the weapon
	if (bArmed)
		{
		start-script disarm();
		while (bDisarming)
			{
			sleep(250);
			}
		}
	}

FirePrimary()
	{
	if (fire==0)
		{
		show flare2;
		move muz_right to z-axis [-2.4] speed [500];
		sleep (150);
		hide flare2;
		wait-for-move muz_right along z-axis;
		move muz_right to z-axis [0] speed [3.0];

		sleep (650);

		show flare2;
		move muz_right to z-axis [-2.4] speed [500];
		sleep (150);
		hide flare2;
		wait-for-move muz_right along z-axis;
		move muz_right to z-axis [0] speed [3.0];

		sleep (650);

		show flare2;
		move muz_right to z-axis [-2.4] speed [500];
		sleep (150);
		hide flare2;
		wait-for-move muz_right along z-axis;
		move muz_right to z-axis [0] speed [3.0];

		sleep (650);

		show flare2;
		move muz_right to z-axis [-2.4] speed [500];
		sleep (150);
		hide flare2;
		wait-for-move muz_right along z-axis;
		move muz_right to z-axis [0] speed [3.0];
		}
	if (fire==1)
		{
		show flare1;
		move muz_left to z-axis [-2.4] speed [500];
		sleep (150);
		hide flare1;
		wait-for-move muz_left along z-axis;
		move muz_left to z-axis [0] speed [3.0];

		sleep (650);

		show flare1;
		move muz_left to z-axis [-2.4] speed [500];
		sleep (150);
		hide flare1;
		wait-for-move muz_left along z-axis;
		move muz_left to z-axis [0] speed [3.0];

		sleep (650);

		show flare1;
		move muz_left to z-axis [-2.4] speed [500];
		sleep (150);
		hide flare1;
		wait-for-move muz_left along z-axis;
		move muz_left to z-axis [0] speed [3.0];

		sleep (650);

		show flare1;
		move muz_left to z-axis [-2.4] speed [500];
		sleep (150);
		hide flare1;
		wait-for-move muz_left along z-axis;
		move muz_left to z-axis [0] speed [3.0];

		}
	fire = !fire;
	}



Killed( severity, corpsetype )
	{
//	hide flare1;
//	hide flare2;
//	cache nrg_left;
//	cache nrg_right;

	if (severity <= 25)
		{
		corpsetype = 1;
		explode base type			BITMAPONLY | BITMAP1;

		explode shoulder_left type	SHATTER | BITMAP1;
		explode rack_left type		BITMAPONLY | BITMAP2;
		explode muz_left type		BITMAPONLY | BITMAP3;
		explode flare1 type			BITMAPONLY | BITMAP3;

		explode shoulder_right type	BITMAPONLY | BITMAP2;
		explode rack_right type		BITMAPONLY | BITMAP2;
		explode muz_right type		BITMAPONLY | BITMAP3;
		explode flare2 type			BITMAPONLY | BITMAP4;

		explode boot_left type		BITMAPONLY | BITMAP3;
		explode arm_left type		BITMAPONLY | BITMAP3;
		explode thruster_left type	FALL | BITMAP2;
		explode nrg_left type		BITMAPONLY | BITMAP1;
		explode s2_left type		BITMAPONLY | BITMAP3;
		explode s1_left type		BITMAPONLY | BITMAP4;

		explode boot_right type		BITMAPONLY | BITMAP3;
		explode arm_right type		BITMAPONLY | BITMAP3;
		explode thruster_right type	BITMAPONLY | BITMAP2;
		explode nrg_right type		BITMAPONLY | BITMAP1;
		explode s1_right type 		BITMAPONLY | BITMAP4;
		explode s2_right type 		BITMAPONLY | BITMAP3;
		return ( 0 );
		}

	if (severity <= 50)
		{
		corpsetype = 2;
		explode base type			BITMAPONLY | BITMAP1;

		explode shoulder_left type	BITMAPONLY | BITMAP2;
		explode rack_left type		BITMAPONLY | BITMAP2;
		explode muz_left type		BITMAPONLY | BITMAP3;
		explode flare1 type			BITMAPONLY | BITMAP3;

		explode shoulder_right type	BITMAPONLY | BITMAP2;
		explode rack_right type		BITMAPONLY | BITMAP2;
		explode muz_right type		BITMAPONLY | BITMAP3;
		explode flare2 type			BITMAPONLY | BITMAP4;

		explode boot_left type		BITMAPONLY | BITMAP3;
		explode arm_left type		BITMAPONLY | BITMAP3;
		explode thruster_left type	SHATTER | BITMAP2;
		explode nrg_left type		BITMAPONLY | BITMAP1;
		explode s2_left type		BITMAPONLY | BITMAP3;
		explode s1_left type		BITMAPONLY | BITMAP4;

		explode boot_right type		FALL | BITMAP3;
		explode arm_right type		BITMAPONLY | BITMAP3;
		explode thruster_right type	BITMAPONLY | BITMAP2;
		explode nrg_right type		BITMAPONLY | BITMAP1;
		explode s1_right type 		BITMAPONLY | BITMAP4;
		explode s2_right type 		BITMAPONLY | BITMAP3;
		return( 0 );
		}

	if (severity <= 99)
		{
		corpsetype = 3;
		explode base type			BITMAPONLY | BITMAP1;

		explode shoulder_left type	BITMAPONLY | BITMAP2;
		explode rack_left type		SHATTER | BITMAP1;
		explode muz_left type		BITMAPONLY | BITMAP3;
		explode flare1 type			BITMAPONLY | BITMAP3;

		explode shoulder_right type	BITMAPONLY | BITMAP2;
		explode rack_right type		SHATTER | BITMAP2;
		explode muz_right type		BITMAPONLY | BITMAP3;
		explode flare2 type			BITMAPONLY | BITMAP4;

		explode boot_left type		BITMAPONLY | BITMAP3;
		explode arm_left type		BITMAPONLY | BITMAP3;
		explode thruster_left type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode nrg_left type		BITMAPONLY | BITMAP1;
		explode s2_left type		BITMAPONLY | BITMAP3;
		explode s1_left type		BITMAPONLY | BITMAP4;

		explode boot_right type		BITMAPONLY | BITMAP3;
		explode arm_right type		BITMAPONLY | BITMAP3;
		explode thruster_right type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode nrg_right type		BITMAPONLY | BITMAP1;
		explode s1_right type 		BITMAPONLY | BITMAP4;
		explode s2_right type 		BITMAPONLY | BITMAP3;
		return( 0 );
		}

	corpsetype = 3;
		explode base type			BITMAPONLY | BITMAP1;

		explode shoulder_left type	BITMAPONLY | BITMAP2;
		explode rack_left type		FALL | SMOKE | FIRE | BITMAP1;
		explode muz_left type		BITMAPONLY | BITMAP3;
		explode flare1 type			BITMAPONLY | BITMAP3;

		explode shoulder_right type	BITMAPONLY | BITMAP2;
		explode rack_right type		FALL | SMOKE | FIRE | BITMAP2;
		explode muz_right type		BITMAPONLY | BITMAP3;
		explode flare2 type			BITMAPONLY | BITMAP4;

		explode boot_left type		BITMAPONLY | BITMAP3;
		explode arm_left type		BITMAPONLY | BITMAP3;
		explode thruster_left type	SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode nrg_left type		BITMAPONLY | BITMAP1;
		explode s2_left type		BITMAPONLY | BITMAP3;
		explode s1_left type		BITMAPONLY | BITMAP4;

		explode boot_right type		BITMAPONLY | BITMAP3;
		explode arm_right type		BITMAPONLY | BITMAP3;
		explode thruster_right type	BITMAPONLY | BITMAP2;
		explode nrg_right type		SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode s1_right type 		BITMAPONLY | BITMAP4;
		explode s2_right type 		BITMAPONLY | BITMAP3;
	return( 0 );
	}
